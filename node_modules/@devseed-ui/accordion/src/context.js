import React, {
  createContext,
  useCallback,
  useContext,
  useEffect,
  useState
} from 'react';
import T from 'prop-types';

// Context
const AccordionContext = createContext(null);

/**
 * Context provider for the accordion.
 * Stores the data needed for the accordions to work. Accordions should be
 * wrapped in the <AccordionManager>
 *
 * @prop {node} children Children to render.
 */
export function AccordionManager({ children, allowMultiple }) {
  const [expandedFolds, setExpandedFolds] = useState([]);
  const [foldList, setFoldList] = useState([]);

  const setExpandedState = useCallback(
    ({ id, expanded = false }) => {
      // Remove from list.
      if (!expanded) {
        setExpandedFolds((list) => list.filter((t) => t !== id));
      } else {
        // Add to list
        if (allowMultiple) {
          setExpandedFolds((list) => {
            const foldSet = new Set(list);
            foldSet.add(id);
            return Array.from(foldSet);
          });
        } else {
          setExpandedFolds([id]);
        }
      }
    },
    [allowMultiple]
  );

  const toggleExpanded = useCallback(
    ({ id }) => {
      const isExpanded = expandedFolds.includes(id);
      setExpandedState({ id, expanded: !isExpanded });
    },
    [expandedFolds, setExpandedState]
  );

  const registerFold = useCallback(
    ({ id, expanded }) => {
      setFoldList((list) => {
        const foldSet = new Set(list);
        foldSet.add(id);
        return Array.from(foldSet);
      });

      if (expanded) {
        setExpandedState({ id, expanded });
      }
    },
    [setExpandedState]
  );

  const unregisterFold = useCallback(({ id }) => {
    setFoldList((list) => list.filter((t) => t !== id));
  }, []);

  const value = {
    foldList,
    setFoldList,
    expandedFolds,
    setExpandedFolds,

    registerFold,
    unregisterFold,
    setExpandedState,
    toggleExpanded
  };

  return (
    <AccordionContext.Provider value={value}>
      {children}
    </AccordionContext.Provider>
  );
}

AccordionManager.propTypes = {
  children: T.node,
  allowMultiple: T.bool
};

export function useAccordionFold(foldId, isInitialOpen = false) {
  const context = useContext(AccordionContext);

  if (!context) {
    throw new Error(
      `The \`useAccordionFold\` hook must be used inside the <AccordionContext> component's context.`
    );
  }

  if (!foldId) {
    throw new Error(`A \`foldId\` is required to use Accordion folds.`);
  }

  const {
    registerFold,
    unregisterFold,
    expandedFolds,
    toggleExpanded,
    setExpandedState
  } = context;

  useEffect(() => {
    if (foldId) {
      registerFold({ id: foldId, expanded: isInitialOpen });
    }

    return () => {
      unregisterFold({ id: foldId });
    };
  }, [foldId, isInitialOpen, registerFold, unregisterFold]);

  return {
    isExpanded: expandedFolds.includes(foldId),
    toggleExpanded: useCallback(
      () => toggleExpanded({ id: foldId }),
      [foldId, toggleExpanded]
    ),
    setExpandedState: useCallback(
      (expanded) => setExpandedState({ id: foldId, expanded }),
      [foldId, setExpandedState]
    )
  };
}

export function useAccordion() {
  const context = useContext(AccordionContext);

  if (!context) {
    throw new Error(
      `The \`useAccordion\` hook must be used inside the <AccordionContext> component's context.`
    );
  }

  const { foldList, setExpandedFolds } = context;

  return {
    ...context,
    expandAll: useCallback(
      () => setExpandedFolds(foldList),
      [setExpandedFolds, foldList]
    ),
    collapseAll: useCallback(() => setExpandedFolds([]), [setExpandedFolds])
  };
}
