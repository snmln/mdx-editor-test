import React, { createContext, useContext, useMemo } from 'react';
import T from 'prop-types';
import { Button } from '@devseed-ui/button';

// The toolbar context is used so that the toolbar children can respond to
// global toolbar props, like the size.

// Context
const ToolbarContext = createContext({ inToolbar: false });

// Context provider
export const ToolbarProvider = (props) => {
  const { children, size } = props;

  const contextValue = useMemo(() => ({ inToolbar: true, size }), [size]);

  return (
    <ToolbarContext.Provider value={contextValue}>
      {children}
    </ToolbarContext.Provider>
  );
};

ToolbarProvider.propTypes = {
  children: T.node,
  size: T.oneOf(['small', 'medium', 'large'])
};

// Context consumer
export const useToolbar = () => {
  // It should be possible to use the hook outside the toolbar to allow
  // component reusability.
  return useContext(ToolbarContext);
};

export const ToolbarContextButton = React.forwardRef((props, ref) => {
  const { size } = useToolbar();
  /* eslint-disable-next-line react/prop-types */
  return <Button {...props} size={size || props.size} ref={ref} />;
});
ToolbarContextButton.displayName = 'ToolbarContextButton';
