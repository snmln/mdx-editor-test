import { DefaultTheme, StyledComponent } from 'styled-components';
import { Overline, HeadingBaseProps } from '@devseed-ui/typography';

declare module '@devseed-ui/dropdown' {
  /**
   * Component to structure the dropdown content.
   * Renders a Overline title. Usually used as the first item.
   */
  export const DropTitle: StyledComponent<
    typeof Overline,
    DefaultTheme,
    HeadingBaseProps,
    never
  >;

  /**
   * Component to structure the dropdown content.
   * Renders a list to hold menu items.
   */
  export const DropMenu: StyledComponent<'ul', DefaultTheme, {}, never>;

  /**
   * Component to structure the dropdown content.
   * Renders an inset with a different style. Usually used as the last element
   * if additional information is needed.
   */
  export const DropInset: StyledComponent<'div', DefaultTheme, {}, never>;

  type DropMenuItemProps = JSX.IntrinsicElements['a'] & {
    /**
     * Whether or not this item should be marked as active.
     */
    active?: boolean;
    /**
     * Whether or not this item should be disabled.
     */
    disabled?: boolean;
    /**
     * Data property to have control over the dropdown behavior.
     * By default clicking a menu item does not close the dropdown. If this
     * property is added to the item, the drop will close on click.
     */
    'data-dropdown'?: 'click.close';
  };

  /**
   * DropMenu item. This item renders a link element, and should therefore be
   * wrapped in a list item.
   *
   * @param {DropMenuItemProps} props Props for the menu item
   */
  export const DropMenuItem: StyledComponent<
    'a',
    DefaultTheme,
    DropMenuItemProps,
    never
  >;

  export interface DropdownRef {
    reposition: () => void;
    open: () => void;
    close: () => void;
  }

  type DropdownProps = Omit<JSX.IntrinsicElements['div'], 'ref'> & {
    /**
     * An id for the dropdown
     */
    id?: string;

    /**
     * This function should return a trigger element which can be any valid
     * React Element. The passed props must be spread onto the trigger element.
     */
    triggerElement?: (triggerProps: {
      ref: React.MutableRefObject<any>;
      onClick: (event: any) => void;
      active: boolean;
      className: string;
      'data-drop-el': 'trigger';
      'data-drop-instance': string;
    }) => React.ReactNode;

    /**
     * Sets opening direction of the dropdown.
     *
     * @default "down"
     */
    direction?: 'up' | 'down' | 'left' | 'right';

    /**
     * Sets the alignment of the dropdown box.
     * [left | center | right] can only be used with [up | down] directions.
     * [top | middle | bottom] can only be used with [left | right] directions.
     *
     * @default "center"
     */
    alignment?: 'left' | 'center' | 'right' | 'top' | 'middle' | 'bottom';
  };

  /**
   * Dropdown component portaled to the body.
   *
   * @param {DropdownProps} props Props for the Dropdown component.
   */
  export const Dropdown: React.ForwardRefExoticComponent<
    DropdownProps & React.RefAttributes<DropdownRef>
  >;
}
