'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var T = require('prop-types');
var styled = require('styled-components');
var collecticons = require('@devseed-ui/collecticons');
var themeProvider = require('@devseed-ui/theme-provider');
var typography = require('@devseed-ui/typography');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var T__default = /*#__PURE__*/_interopDefaultLegacy(T);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var AccordionContext = /*#__PURE__*/React.createContext(null);
/**
 * Context provider for the accordion.
 * Stores the data needed for the accordions to work. Accordions should be
 * wrapped in the <AccordionManager>
 *
 * @prop {node} children Children to render.
 */

function AccordionManager(_ref) {
  var children = _ref.children,
      allowMultiple = _ref.allowMultiple;

  var _useState = React.useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      expandedFolds = _useState2[0],
      setExpandedFolds = _useState2[1];

  var _useState3 = React.useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      foldList = _useState4[0],
      setFoldList = _useState4[1];

  var setExpandedState = React.useCallback(function (_ref2) {
    var id = _ref2.id,
        _ref2$expanded = _ref2.expanded,
        expanded = _ref2$expanded === void 0 ? false : _ref2$expanded;

    // Remove from list.
    if (!expanded) {
      setExpandedFolds(function (list) {
        return list.filter(function (t) {
          return t !== id;
        });
      });
    } else {
      // Add to list
      if (allowMultiple) {
        setExpandedFolds(function (list) {
          var foldSet = new Set(list);
          foldSet.add(id);
          return Array.from(foldSet);
        });
      } else {
        setExpandedFolds([id]);
      }
    }
  }, [allowMultiple]);
  var toggleExpanded = React.useCallback(function (_ref3) {
    var id = _ref3.id;
    var isExpanded = expandedFolds.includes(id);
    setExpandedState({
      id: id,
      expanded: !isExpanded
    });
  }, [expandedFolds, setExpandedState]);
  var registerFold = React.useCallback(function (_ref4) {
    var id = _ref4.id,
        expanded = _ref4.expanded;
    setFoldList(function (list) {
      var foldSet = new Set(list);
      foldSet.add(id);
      return Array.from(foldSet);
    });

    if (expanded) {
      setExpandedState({
        id: id,
        expanded: expanded
      });
    }
  }, [setExpandedState]);
  var unregisterFold = React.useCallback(function (_ref5) {
    var id = _ref5.id;
    setFoldList(function (list) {
      return list.filter(function (t) {
        return t !== id;
      });
    });
  }, []);
  var value = {
    foldList: foldList,
    setFoldList: setFoldList,
    expandedFolds: expandedFolds,
    setExpandedFolds: setExpandedFolds,
    registerFold: registerFold,
    unregisterFold: unregisterFold,
    setExpandedState: setExpandedState,
    toggleExpanded: toggleExpanded
  };
  return /*#__PURE__*/React__default["default"].createElement(AccordionContext.Provider, {
    value: value
  }, children);
}
AccordionManager.propTypes = {
  children: T__default["default"].node,
  allowMultiple: T__default["default"].bool
};
function useAccordionFold(foldId) {
  var isInitialOpen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var context = React.useContext(AccordionContext);

  if (!context) {
    throw new Error("The `useAccordionFold` hook must be used inside the <AccordionContext> component's context.");
  }

  if (!foldId) {
    throw new Error("A `foldId` is required to use Accordion folds.");
  }

  var registerFold = context.registerFold,
      unregisterFold = context.unregisterFold,
      expandedFolds = context.expandedFolds,
      toggleExpanded = context.toggleExpanded,
      setExpandedState = context.setExpandedState;
  React.useEffect(function () {
    if (foldId) {
      registerFold({
        id: foldId,
        expanded: isInitialOpen
      });
    }

    return function () {
      unregisterFold({
        id: foldId
      });
    };
  }, [foldId, isInitialOpen, registerFold, unregisterFold]);
  return {
    isExpanded: expandedFolds.includes(foldId),
    toggleExpanded: React.useCallback(function () {
      return toggleExpanded({
        id: foldId
      });
    }, [foldId, toggleExpanded]),
    setExpandedState: React.useCallback(function (expanded) {
      return setExpandedState({
        id: foldId,
        expanded: expanded
      });
    }, [foldId, setExpandedState])
  };
}
function useAccordion() {
  var context = React.useContext(AccordionContext);

  if (!context) {
    throw new Error("The `useAccordion` hook must be used inside the <AccordionContext> component's context.");
  }

  var foldList = context.foldList,
      setExpandedFolds = context.setExpandedFolds;
  return _objectSpread2(_objectSpread2({}, context), {}, {
    expandAll: React.useCallback(function () {
      return setExpandedFolds(foldList);
    }, [setExpandedFolds, foldList]),
    collapseAll: React.useCallback(function () {
      return setExpandedFolds([]);
    }, [setExpandedFolds])
  });
}

var AccordionFoldSelf = /*#__PURE__*/styled__default["default"].section.withConfig({
  displayName: "styled__AccordionFoldSelf",
  componentId: "sc-u4hrcc-0"
})(["display:grid;background:", ";border-radius:", ";"], themeProvider.themeVal('color.surface'), themeProvider.themeVal('shape.rounded'));
var AccordionFoldHeader = /*#__PURE__*/styled__default["default"].header.withConfig({
  displayName: "styled__AccordionFoldHeader",
  componentId: "sc-u4hrcc-1"
})(["box-shadow:0 1px 0 0 ", ";"], themeProvider.themeVal('color.base-100a'));
var AccordionFoldTrigger = /*#__PURE__*/styled__default["default"].button.withConfig({
  displayName: "styled__AccordionFoldTrigger",
  componentId: "sc-u4hrcc-2"
})(["display:flex;align-items:center;padding:", ";text-decoration:none;border:0;background:inherit;color:inherit;width:100%;cursor:pointer;", "{transition:transform 240ms ease-in-out;transform:", ";margin-left:auto;}"], themeProvider.glsp(), collecticons.CollecticonChevronDownSmall, function (_ref) {
  var isExpanded = _ref.isExpanded;
  return isExpanded ? 'rotate(180deg)' : 'rotate(0deg)';
});
var AccordionFoldBody = /*#__PURE__*/styled__default["default"].div.withConfig({
  displayName: "styled__AccordionFoldBody",
  componentId: "sc-u4hrcc-3"
})(["overflow:hidden;transition:", ";opacity:", ";max-height:", ";"], function (_ref2) {
  var isExpanded = _ref2.isExpanded;
  return isExpanded ? 'max-height 320ms ease-in-out, opacity 160ms ease-in-out' : 'max-height 320ms ease-in-out, opacity 160ms ease-in-out 160ms';
}, function (_ref3) {
  var isExpanded = _ref3.isExpanded;
  return isExpanded ? 1 : 0;
}, function (_ref4) {
  var isExpanded = _ref4.isExpanded;
  return isExpanded ? '400vh' : 0;
});
var AccordionFoldBodyInner = /*#__PURE__*/styled__default["default"].div.withConfig({
  displayName: "styled__AccordionFoldBodyInner",
  componentId: "sc-u4hrcc-4"
})(["box-shadow:0 1px 0 0 ", ";background:", ";padding:", ";"], themeProvider.themeVal('color.base-100a'), themeProvider.themeVal('color.base-50a'), themeProvider.glsp());

var _excluded$1 = ["fn", "children"];
/**
 * Tries to render the given function falling back to the children if it is not
 * set.
 *
 * @param {function} fn The render function to try to run
 * @param {node} children The fallback if the render function is not set
 * @prop {any} rest Remaining props are passed to the function
 */

function Try(props) {
  /* eslint-disable-next-line react/prop-types */
  var F = props.fn,
      children = props.children,
      rest = _objectWithoutProperties(props, _excluded$1);

  if ( /*#__PURE__*/React__default["default"].isValidElement(F)) {
    return /*#__PURE__*/React__default["default"].createElement(F, props);
  } else if (typeof F === 'function') {
    return F(rest);
  } else {
    return children || null;
  }
}

var _excluded = ["id", "title", "content", "headingAs", "initialOpen", "renderBody", "renderHeader"];
/**
 * React Accordion Fold component.
 *
 * @param {string} id An id for the fold
 * @param {string} className Classname for the fold.
 * @param {string} title Title to use on the fold header. Required unless
 *                 renderHeader is being used.
 * @param {node} content Content for the fold. Required unless
 *               renderBody is being used.
 * @param {function} renderHeader Overrides the fold header element.
 *                   Anything returned by this function is rendered instead of
 *                   `AccordionFoldHeader`.
 *                   Signature: fn(bag). Bag has the following props:
 *                     {boolean} isExpanded Whether or not this fold
 *                               is expanded.
 *                     {function} setExpandedState Method to change the fold
 *                                state by passing a boolean with the new state.
 * @param {function} renderBody Overrides the fold body element.
 *                   Anything returned by this function is rendered instead of
 *                   `AccordionFoldBodyInner`.
 *                   Signature: fn(bag). Bag has the following props:
 *                     {boolean} isExpanded Whether or not this fold
 *                               is expanded.
 *                     {function} setExpandedState Method to change the fold
 *                                state by passing a boolean with the new state.
 *
 */

function AccordionFoldCmp(_ref) {
  var id = _ref.id,
      title = _ref.title,
      content = _ref.content,
      headingAs = _ref.headingAs,
      initialOpen = _ref.initialOpen,
      renderBody = _ref.renderBody,
      renderHeader = _ref.renderHeader,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useAccordionFold = useAccordionFold(id, initialOpen),
      isExpanded = _useAccordionFold.isExpanded,
      setExpandedState = _useAccordionFold.setExpandedState,
      toggleExpanded = _useAccordionFold.toggleExpanded;

  var onTriggerClick = function onTriggerClick(e) {
    e.preventDefault();
    toggleExpanded();
  };

  var contentId = "accordion-".concat(id, "-content");
  var fnBag = {
    contentId: contentId,
    isExpanded: isExpanded,
    setExpandedState: setExpandedState,
    toggleExpanded: toggleExpanded
  };
  return /*#__PURE__*/React__default["default"].createElement(AccordionFoldSelf, _extends({
    id: id
  }, rest), /*#__PURE__*/React__default["default"].createElement(Try, _extends({
    contentId: contentId,
    fn: renderHeader
  }, fnBag), /*#__PURE__*/React__default["default"].createElement(AccordionFoldHeader, null, /*#__PURE__*/React__default["default"].createElement(typography.Heading, {
    size: "small",
    as: headingAs
  }, /*#__PURE__*/React__default["default"].createElement(AccordionFoldTrigger, {
    isExpanded: isExpanded,
    onClick: onTriggerClick,
    "aria-controls": contentId,
    "aria-expanded": isExpanded
  }, title, /*#__PURE__*/React__default["default"].createElement(collecticons.CollecticonChevronDownSmall, {
    title: isExpanded ? 'Contract accordion icon' : 'Expand accordion icon'
  }))))), /*#__PURE__*/React__default["default"].createElement(AccordionFoldBody, {
    id: contentId,
    isExpanded: isExpanded,
    "aria-hidden": !isExpanded
  }, /*#__PURE__*/React__default["default"].createElement(Try, _extends({
    fn: renderBody
  }, fnBag), /*#__PURE__*/React__default["default"].createElement(AccordionFoldBodyInner, null, content))));
}

AccordionFoldCmp.propTypes = {
  id: T__default["default"].string.isRequired,
  initialOpen: T__default["default"].bool,
  title: T__default["default"].node,
  headingAs: T__default["default"].oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),
  content: T__default["default"].node,
  renderBody: T__default["default"].func,
  renderHeader: T__default["default"].func
};
var AccordionFold = /*#__PURE__*/styled__default["default"](AccordionFoldCmp).withConfig({
  displayName: "AccordionFold",
  componentId: "sc-ial1fl-0"
})([""]);

exports.AccordionFold = AccordionFold;
exports.AccordionFoldBodyInner = AccordionFoldBodyInner;
exports.AccordionFoldHeader = AccordionFoldHeader;
exports.AccordionFoldTrigger = AccordionFoldTrigger;
exports.AccordionManager = AccordionManager;
exports.useAccordion = useAccordion;
exports.useAccordionFold = useAccordionFold;
//# sourceMappingURL=index.cjs.js.map
