import React from 'react';
import T from 'prop-types';
import styled from 'styled-components';

import { CollecticonChevronDownSmall } from '@devseed-ui/collecticons';

import {
  AccordionFoldSelf,
  AccordionFoldHeader,
  AccordionFoldTrigger,
  AccordionFoldBody,
  AccordionFoldBodyInner
} from './styled';
import { useAccordionFold } from './context';
import Try from './try-render';
import { Heading } from '@devseed-ui/typography';

/**
 * React Accordion Fold component.
 *
 * @param {string} id An id for the fold
 * @param {string} className Classname for the fold.
 * @param {string} title Title to use on the fold header. Required unless
 *                 renderHeader is being used.
 * @param {node} content Content for the fold. Required unless
 *               renderBody is being used.
 * @param {function} renderHeader Overrides the fold header element.
 *                   Anything returned by this function is rendered instead of
 *                   `AccordionFoldHeader`.
 *                   Signature: fn(bag). Bag has the following props:
 *                     {boolean} isExpanded Whether or not this fold
 *                               is expanded.
 *                     {function} setExpandedState Method to change the fold
 *                                state by passing a boolean with the new state.
 * @param {function} renderBody Overrides the fold body element.
 *                   Anything returned by this function is rendered instead of
 *                   `AccordionFoldBodyInner`.
 *                   Signature: fn(bag). Bag has the following props:
 *                     {boolean} isExpanded Whether or not this fold
 *                               is expanded.
 *                     {function} setExpandedState Method to change the fold
 *                                state by passing a boolean with the new state.
 *
 */
function AccordionFoldCmp({
  id,
  title,
  content,
  headingAs,
  initialOpen,
  renderBody,
  renderHeader,
  ...rest
}) {
  const { isExpanded, setExpandedState, toggleExpanded } = useAccordionFold(
    id,
    initialOpen
  );

  const onTriggerClick = (e) => {
    e.preventDefault();
    toggleExpanded();
  };

  const contentId = `accordion-${id}-content`;

  const fnBag = {
    contentId,
    isExpanded,
    setExpandedState,
    toggleExpanded
  };

  return (
    <AccordionFoldSelf id={id} {...rest}>
      <Try contentId={contentId} fn={renderHeader} {...fnBag}>
        <AccordionFoldHeader>
          <Heading size='small' as={headingAs}>
            <AccordionFoldTrigger
              isExpanded={isExpanded}
              onClick={onTriggerClick}
              aria-controls={contentId}
              aria-expanded={isExpanded}
            >
              {title}
              <CollecticonChevronDownSmall
                title={
                  isExpanded
                    ? 'Contract accordion icon'
                    : 'Expand accordion icon'
                }
              />
            </AccordionFoldTrigger>
          </Heading>
        </AccordionFoldHeader>
      </Try>
      <AccordionFoldBody
        id={contentId}
        isExpanded={isExpanded}
        aria-hidden={!isExpanded}
      >
        <Try fn={renderBody} {...fnBag}>
          <AccordionFoldBodyInner>{content}</AccordionFoldBodyInner>
        </Try>
      </AccordionFoldBody>
    </AccordionFoldSelf>
  );
}

AccordionFoldCmp.propTypes = {
  id: T.string.isRequired,
  initialOpen: T.bool,
  title: T.node,
  headingAs: T.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']),
  content: T.node,
  renderBody: T.func,
  renderHeader: T.func
};

export const AccordionFold = styled(AccordionFoldCmp)`
  /* No default styles. Created as a styled component to allow overrides */
`;
