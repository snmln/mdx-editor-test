import React from 'react';
import { renderToString } from 'react-dom/server';
import { render } from '@testing-library/react';

import { createCollecticon } from '.';

const Icon = createCollecticon((props) => (
  <svg {...props}>
    <title>{props.title || 'icon'}</title>
    {/* a real icon would have a path here */}
  </svg>
));

describe('<Collecticon/>', () => {
  it('icon component with defaults', () => {
    const defaultIcon = render(<Icon />);
    expect(defaultIcon.asFragment()).toMatchSnapshot();
  });

  it('meaningful icon component', () => {
    const rendered = render(<Icon title='meaningful title' meaningful />);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it('icon component with size and color', () => {
    const rendered = render(<Icon size='large' color='#FF0000' />);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it('icon component with numeric size', () => {
    const rendered = render(<Icon size={21} />);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it('renders SSR compatible <Icon />', () => {
    const renderOnServer = () =>
      renderToString(
        <div>
          <Icon />
        </div>
      );
    expect(renderOnServer).not.toThrow();
  });

  it('renders an icon with a ref on the svg element', () => {
    const refSvg = {
      current: null
    };
    const r = render(<Icon ref={refSvg} />);
    const svgEl = r.container.querySelector('svg');

    expect(refSvg.current).not.toBeNull();
    expect(refSvg.current).toBeInTheDocument();
    expect(refSvg.current).toBe(svgEl);
  });
});
