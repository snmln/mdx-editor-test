import React from 'react';
import { renderToString } from 'react-dom/server';
import {
  render,
  cleanup,
  fireEvent,
  screen,
  waitForElementToBeRemoved
} from '@testing-library/react';

import { Button } from '@devseed-ui/button';
import { DevseedUiThemeProvider } from '@devseed-ui/theme-provider';

import { Dropdown } from '.';

const originalFn = Dropdown.generateUUID;
afterAll(() => {
  cleanup();
  Dropdown.generateUUID = originalFn;
});

const DropdownExample = () => {
  Dropdown.generateUUID = () => 'test-uuid';

  return (
    <DevseedUiThemeProvider>
      <Dropdown
        alignment='center'
        direction='down'
        triggerElement={(props) => (
          <Button title='Toggle dropdown' {...props}>
            Trigger
          </Button>
        )}
        data-prop='custom-prop'
      >
        <p>Test content</p>
      </Dropdown>
    </DevseedUiThemeProvider>
  );
};

describe('<Dropdown />', () => {
  it('renders <Dropdown />', () => {
    const wrapper = render(<DropdownExample />);
    const trigger = wrapper.getByText('Trigger');
    fireEvent.click(trigger);

    expect(wrapper.baseElement).toMatchSnapshot();
  });

  it('render list with different functions assigned to the items', async () => {
    const testFn = jest.fn();

    render(
      <DevseedUiThemeProvider>
        <Dropdown
          alignment='center'
          direction='down'
          triggerElement={(props) => (
            <Button title='Toggle dropdown' {...props}>
              Open
            </Button>
          )}
        >
          <ul>
            <li data-dropdown='click.close'>Item 1</li>
            <li>
              <Button onClick={() => testFn()}>Item 2</Button>
            </li>
          </ul>
        </Dropdown>
        <p>Outside dropdown</p>
      </DevseedUiThemeProvider>
    );
    expect(screen.queryByText('Item 1')).not.toBeInTheDocument();
    expect(screen.queryByText('Item 2')).not.toBeInTheDocument();
    // Open Dropdown and run checks
    fireEvent.click(screen.getByText('Open'));
    expect(screen.getByText('Item 1')).toBeInTheDocument();
    expect(screen.getByText('Item 2')).toBeInTheDocument();
    // Test if Dropdown is closed when the user clicks in any place outside it
    fireEvent.click(screen.getByText('Outside dropdown'));
    await waitForElementToBeRemoved(screen.queryByText('Item 1'));
    expect(screen.queryByText('Item 1')).not.toBeInTheDocument();
    expect(screen.queryByText('Item 2')).not.toBeInTheDocument();
    // Reopen Dropdown
    fireEvent.click(screen.getByText('Open'));
    // Clicking on an element with some onClick function
    fireEvent.click(screen.getByText('Item 2'));
    expect(testFn).toHaveBeenCalled();
    // Closing dropdown by clicking on an element with data-dropdown="click.close"
    fireEvent.click(screen.getByText('Item 1'));
    await waitForElementToBeRemoved(screen.queryByText('Item 1'));
    expect(screen.queryByText('Item 1')).not.toBeInTheDocument();
    expect(screen.queryByText('Item 2')).not.toBeInTheDocument();
  });

  it('renders SSR compatible <Dropdown />', () => {
    const renderOnServer = () => renderToString(<DropdownExample />);
    expect(renderOnServer).not.toThrow();
  });
});
