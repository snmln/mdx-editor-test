import React, { useCallback, useMemo } from 'react';
import T from 'prop-types';
import styled, { css } from 'styled-components';
import ReactCalendar from 'react-calendar';
import { format } from 'date-fns';

import {
  themeVal,
  glsp,
  visuallyHidden,
  rgba
} from '@devseed-ui/theme-provider';
import {
  iconDataURI,
  CollecticonChevronLeftSmall,
  CollecticonChevronLeftTrailSmall,
  CollecticonChevronRightSmall,
  CollecticonChevronRightTrailSmall,
  CollecticonSwapHorizontal
} from '@devseed-ui/collecticons';
import { createOverlineStyles } from '@devseed-ui/typography';

import { compareDates, useDateNotAllowed } from './utils';

const iconAsPseudoBackground =
  (icon) =>
  ({ theme }) =>
    css`
      display: block;
      content: '';
      background-image: url('${iconDataURI(icon, {
        color: theme.color.base
      })}');
      background-size: 1rem 1rem;
      width: 1rem;
      height: 1rem;
    `;

const CalendarStyled = styled(ReactCalendar)`
  --rangeSelectBorderColor: ${rgba(themeVal('color.link'), 0.32)};
  display: grid;
  grid-gap: ${glsp(0.75)};

  // Button reset.
  .react-calendar__tile,
  .react-calendar__navigation__label,
  .react-calendar__navigation__arrow {
    border: 0;
    background: none;
    cursor: pointer;
    border-radius: ${themeVal('shape.rounded')};
    color: ${themeVal('type.base.color')};
    transition: all 0.24s ease 0s;

    &:focus {
      outline: 0;
    }
  }

  .react-calendar__navigation {
    display: flex;

    > * {
      line-height: 1.5rem;
    }

    > [disabled] {
      pointer-events: none;
      opacity: 0.64;
    }

    &__prev-button {
      margin-left: auto;
    }

    &__arrow {
      width: 1.5rem;
      height: 1.5rem;
      order: 2;

      &:hover {
        background: ${themeVal('color.base-100a')};
      }

      &:active {
        background: ${themeVal('color.base-200a')};
      }

      span {
        ${visuallyHidden()}
      }

      &.react-calendar__navigation__prev-button::before {
        ${iconAsPseudoBackground(CollecticonChevronLeftSmall)}
      }

      &.react-calendar__navigation__prev2-button::before {
        ${iconAsPseudoBackground(CollecticonChevronLeftTrailSmall)}
      }

      &.react-calendar__navigation__next-button::before {
        ${iconAsPseudoBackground(CollecticonChevronRightSmall)}
      }

      &.react-calendar__navigation__next2-button::before {
        ${iconAsPseudoBackground(CollecticonChevronRightTrailSmall)}
      }
    }

    &__label {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-grow: 0 !important;
      padding: ${glsp(0, 0.5)};
      font-weight: ${themeVal('type.base.bold')};

      &::after {
        ${iconAsPseudoBackground(CollecticonSwapHorizontal)}
        margin-left: ${glsp(0.5)};
      }

      &:hover {
        background: ${themeVal('color.base-100a')};
      }

      &:active {
        background: ${themeVal('color.base-200a')};
      }
    }
  }

  .react-calendar__month-view__weekdays,
  .react-calendar__month-view__days,
  .react-calendar__year-view__months,
  .react-calendar__decade-view__years {
    display: grid !important;
    grid-gap: ${glsp(0.25, 0)};
    text-align: center;
  }

  .react-calendar__month-view__weekdays,
  .react-calendar__month-view__days {
    grid-template-columns: repeat(7, 1fr);
  }

  .react-calendar__year-view__months {
    grid-template-columns: repeat(3, 1fr);
  }

  .react-calendar__decade-view__years {
    grid-template-columns: repeat(4, 1fr);
  }

  .react-calendar__month-view__weekdays {
    ${createOverlineStyles}
    font-size: 0.75rem;

    abbr {
      text-decoration: none;
    }

    &__weekday {
      flex-basis: 0 !important;
      max-width: none !important;
      overflow: visible !important;
      margin-bottom: ${glsp(0.25)};
    }
  }

  .react-calendar__month-view__days__day--neighboringMonth {
    color: ${rgba(themeVal('color.base'), 0.48)};
  }

  .react-calendar__tile {
    position: relative;
    flex-basis: 0 !important;
    max-width: none !important;
    overflow: visible !important;
    line-height: 1.25rem;
    padding: ${glsp(0, 0.5)};
    height: 2rem;
    border-radius: ${themeVal('shape.rounded')};
    border: 2px dashed transparent;

    &:disabled {
      opacity: 0.48;
      pointer-events: none;
    }

    &--active,
    &--hasActive {
      background: ${themeVal('color.link')};
      color: #ffffff;
    }

    &--now {
      z-index: 10;

      &::before {
        position: absolute;
        z-index: 1;
        top: 0;
        left: 50%;
        transform: translate(-50%, -50%);
        background: ${themeVal('color.link')};
        border-radius: ${themeVal('shape.rounded')};
        box-shadow: 0 0 0 2px #ffffff;
        height: 0.5rem;
        width: 0.5rem;
        content: '';
        pointer-events: none;
      }
    }
  }

  .react-calendar__tile--range {
    background: ${rgba(themeVal('color.link'), 0.32)};
    color: inherit;
  }

  .react-calendar__month-view__days {
    .react-calendar__tile--range {
      &:not(.react-calendar__tile--rangeStart):not(.react-calendar__tile--rangeEnd) {
        &:not(:nth-child(7n + 0)) {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }

        &:not(:nth-child(7n + 1)) {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    .react-calendar__tile--rangeStart:not(.react-calendar__tile--rangeEnd):not(:nth-child(7n
          + 0)) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .react-calendar__tile--rangeEnd:not(.react-calendar__tile--rangeStart):not(:nth-child(7n
          + 1)) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  .react-calendar__year-view__months {
    .react-calendar__tile--range {
      &:not(.react-calendar__tile--rangeStart):not(.react-calendar__tile--rangeEnd) {
        &:not(:nth-child(3n + 0)) {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }

        &:not(:nth-child(3n + 1)) {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    .react-calendar__tile--rangeStart:not(.react-calendar__tile--rangeEnd):not(:nth-child(3n
          + 0)) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .react-calendar__tile--rangeEnd:not(.react-calendar__tile--rangeStart):not(:nth-child(3n
          + 1)) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  .react-calendar__decade-view__years {
    .react-calendar__tile--range {
      &:not(.react-calendar__tile--rangeStart):not(.react-calendar__tile--rangeEnd) {
        &:not(:nth-child(4n + 0)) {
          border-top-right-radius: 0;
          border-bottom-right-radius: 0;
        }

        &:not(:nth-child(4n + 1)) {
          border-top-left-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    .react-calendar__tile--rangeStart:not(.react-calendar__tile--rangeEnd):not(:nth-child(4n
          + 0)) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .react-calendar__tile--rangeEnd:not(.react-calendar__tile--rangeStart):not(:nth-child(4n
          + 1)) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  .react-calendar__tile--rangeStart,
  .react-calendar__tile--rangeEnd {
    background: ${themeVal('color.link')};
    color: #ffffff;
  }

  .react-calendar__tile:hover,
  .react-calendar__tile--active:hover {
    background: ${rgba(themeVal('color.link'), 0.16)} !important;
    color: inherit !important;
  }

  &.react-calendar--selectRange {
    .react-calendar__tile {
      &--rangeStart:hover {
        background: ${rgba(themeVal('color.link'), 0.32)} !important;
      }

      &--hoverStart:not(.react-calendar__tile--rangeStart) {
        border-left-color: var(--rangeSelectBorderColor) !important;
      }

      &--hoverEnd:not(.react-calendar__tile--rangeStart) {
        border-right-color: var(--rangeSelectBorderColor) !important;
      }
    }

    .react-calendar__month-view__days {
      .react-calendar__tile {
        &--hover:not(.react-calendar__tile--rangeStart) {
          border-color: var(--rangeSelectBorderColor);

          &:not(:nth-child(7n + 0)) {
            border-right-color: transparent;
          }

          &:not(:nth-child(7n + 1)) {
            border-left-color: transparent;
          }
        }
      }

      .react-calendar__tile--hoverStart:not(.react-calendar__tile--hoverEnd):not(:nth-child(7n
            + 0)) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      .react-calendar__tile--hoverEnd:not(.react-calendar__tile--hoverStart):not(:nth-child(7n
            + 1)) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }

    .react-calendar__year-view__months {
      .react-calendar__tile {
        &--hover:not(.react-calendar__tile--rangeStart) {
          border-color: var(--rangeSelectBorderColor);

          &:not(:nth-child(3n + 0)) {
            border-right-color: transparent;
          }

          &:not(:nth-child(3n + 1)) {
            border-left-color: transparent;
          }
        }
      }

      .react-calendar__tile--hoverStart:not(.react-calendar__tile--hoverEnd):not(:nth-child(3n
            + 0)) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      .react-calendar__tile--hoverEnd:not(.react-calendar__tile--hoverStart):not(:nth-child(3n
            + 1)) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }

    .react-calendar__decade-view__years {
      .react-calendar__tile {
        &--hover:not(.react-calendar__tile--rangeStart) {
          border-color: var(--rangeSelectBorderColor);

          &:not(:nth-child(4n + 0)) {
            border-right-color: transparent;
          }

          &:not(:nth-child(4n + 1)) {
            border-left-color: transparent;
          }
        }
      }

      .react-calendar__tile--hoverStart:not(.react-calendar__tile--hoverEnd):not(:nth-child(4n
            + 0)) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

      .react-calendar__tile--hoverEnd:not(.react-calendar__tile--hoverStart):not(:nth-child(4n
            + 1)) {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
    }
  }
`;

export default function Calendar(props) {
  const {
    value,
    className,
    isRange,
    view,
    min,
    max,
    onChange,
    datesToRestrict,
    restrictMode
  } = props;

  // Convert from array to object
  const onDateChange = useCallback(
    (date) => {
      if (isRange) {
        const [start, end] = date;
        onChange({ start, end });
      } else {
        onChange({ start: date, end: date });
      }
    },
    [isRange, onChange]
  );
  // and vice versa...
  const dateValue = useMemo(() => {
    const { start, end } = value;
    return isRange ? [start, end] : [start];
  }, [isRange, value]);

  const isTileDisabled = useDateNotAllowed(datesToRestrict, restrictMode, {
    view
  });

  // Default start date is today, unless it is outside the min/max domain
  let startDate = value.end || value.start || new Date();

  if (min && compareDates(startDate, min, { view }) === -1) {
    startDate = min;
  }

  if (max && compareDates(startDate, max, { view }) === 1) {
    startDate = max;
  }

  return (
    <CalendarStyled
      className={className}
      tileDisabled={isTileDisabled}
      prevLabel={<span>Previous</span>}
      prev2Label={null}
      nextLabel={<span>Next</span>}
      next2Label={null}
      onChange={onDateChange}
      value={dateValue}
      selectRange={isRange}
      minDetail='decade'
      maxDetail={view}
      minDate={min}
      maxDate={max}
      defaultActiveStartDate={startDate}
      formatShortWeekday={(l, date) => format(date, 'EEEEE')}
    />
  );
}

Calendar.propTypes = {
  className: T.string,
  value: T.shape({
    start: T.instanceOf(Date),
    end: T.instanceOf(Date)
  }),
  min: T.instanceOf(Date),
  max: T.instanceOf(Date),
  view: T.oneOf(['month', 'year', 'decade']),
  isRange: T.bool,
  onChange: T.func,
  datesToRestrict: T.arrayOf(T.instanceOf(Date)),
  restrictMode: T.oneOf(['enable', 'disable'])
};

Calendar.defaultProps = {
  view: 'month',
  restrictMode: 'disable'
};
