import React from 'react';
import { renderToString } from 'react-dom/server';
import { cleanup } from '@testing-library/react';
import { DevseedUiThemeProvider } from '@devseed-ui/theme-provider';

import { Button } from '.';
import renderWithTheme from '../../../test/_setup-theme-provider';

afterAll(cleanup);

describe('<Button />', () => {
  const onClick = jest.fn();
  const className = 'test-button-class';
  const title = 'Test button title';
  const child = 'Button child';

  const renderedComponent = renderWithTheme(
    <Button className={className} title={title} onClick={onClick}>
      {child}
    </Button>
  );

  const renderedButton = renderedComponent.container.firstChild;

  it(`renders "${className}" in the button's classList`, () => {
    expect(renderedButton.classList.contains(className)).toBe(true);
  });

  it(`renders "${child}" as the button's textContent`, () => {
    expect(renderedButton.textContent).toBe(child);
  });

  it(`renders "${title}" as the button title`, () => {
    expect(renderedButton.title).toBe(title);
  });

  it(`renders inside of a button tag by default`, () => {
    expect(renderedButton.tagName.toLowerCase()).toBe('button');
  });

  it(`renders a button with the "button" type by default`, () => {
    expect(renderedButton.type).toBe('button');
  });

  it(`renders a button with the given type when one is set`, () => {
    const submitButton = renderWithTheme(
      <Button type='submit'>My submit button</Button>
    ).container.firstChild;
    expect(submitButton.type).toBe('submit');
  });

  it(`renders component inside of a React Element/HTML tag based on forwardedAs prop`, () => {
    const { container } = renderWithTheme(
      <Button forwardedAs='div'>Click me!</Button>
    );
    const buttonComponent = container.firstChild;
    expect(buttonComponent.tagName.toLowerCase()).toBe('div');
  });

  it(`renders component inside of a React Element/HTML tag based on forwardedAs prop, even when "href" is set`, () => {
    const { container } = renderWithTheme(
      <Button forwardedAs='div' href='http://developmentseed.org'>
        Click me!
      </Button>
    );
    const buttonComponent = container.firstChild;

    expect(buttonComponent.tagName.toLowerCase()).toBe('div');
  });

  it(`renders a active button`, () => {
    const rendered = renderWithTheme(<Button active>Btn</Button>);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it(`renders a disabled button`, () => {
    const rendered = renderWithTheme(<Button disabled>Btn</Button>);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it('renders SSR compatible <Button />', () => {
    const renderOnServer = () =>
      renderToString(
        <DevseedUiThemeProvider>
          <Button>Some button</Button>
        </DevseedUiThemeProvider>
      );
    expect(renderOnServer).not.toThrow();
  });

  const btnVariations = [
    'base-fill',
    'base-text',
    'base-outline',
    'primary-fill',
    'primary-text',
    'primary-outline',
    'achromic-text',
    'achromic-outline'
  ];

  describe('button variations', () => {
    it.each(btnVariations)(`should render: %s`, (variation) => {
      const rendered = renderWithTheme(
        <Button variation={variation}>Btn</Button>
      );
      expect(rendered.asFragment()).toMatchSnapshot();
    });
  });

  const btnSize = ['small', 'medium', 'large', 'xlarge'];

  describe('button size', () => {
    it.each(btnSize)(`should render: %s`, (size) => {
      const rendered = renderWithTheme(<Button size={size}>Btn</Button>);
      expect(rendered.asFragment()).toMatchSnapshot();
    });
  });

  const btnRadius = ['rounded', 'ellipsoid', 'square'];

  describe('button radius', () => {
    it.each(btnRadius)(`should render: %s`, (radius) => {
      const rendered = renderWithTheme(<Button radius={radius}>Btn</Button>);
      expect(rendered.asFragment()).toMatchSnapshot();
    });
  });

  const btnFitting = ['skinny', 'regular', 'relaxed', 'baggy'];

  describe('button fitting', () => {
    it.each(btnFitting)(`should render: %s`, (fitting) => {
      const rendered = renderWithTheme(<Button fitting={fitting}>Btn</Button>);
      expect(rendered.asFragment()).toMatchSnapshot();
    });
  });
});
