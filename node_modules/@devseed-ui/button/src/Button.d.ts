import {
  DefaultTheme,
  FlattenInterpolation,
  StyledComponent,
  ThemeProps
} from 'styled-components';

declare module '@devseed-ui/button' {
  export interface ButtonProps {
    children?: React.ReactNode;

    /**
     * Button variation to render.
     * A regular variation is a combination of <color-name>-<text|fill|outline>
     * Achromic versions are only outline or text.
     *
     * @default "base-text"
     */
    variation?:
      | 'base-text'
      | 'base-fill'
      | 'base-outline'
      | 'primary-text'
      | 'primary-fill'
      | 'primary-outline'
      | 'secondary-text'
      | 'secondary-fill'
      | 'secondary-outline'
      | 'danger-text'
      | 'danger-fill'
      | 'danger-outline'
      | 'success-text'
      | 'success-fill'
      | 'success-outline'
      | 'warning-text'
      | 'warning-fill'
      | 'warning-outline'
      | 'info-text'
      | 'info-fill'
      | 'info-outline'
      | 'achromic-fill'
      | 'achromic-outline';

    /**
     * The button size.
     * @default "medium"
     */
    size?: 'small' | 'medium' | 'large' | 'xlarge';

    /**
     * The value for the corner radius.
     * @default "rounded"
     */
    radius?: 'ellipsoid' | 'square' | 'rounded';

    /**
     * The value for the button fitting. Controls how the button fits in its
     * container and its padding. When using a button with an icon only it is
     * important to set the fitting to `skinny`.
     */
    fitting?: 'skinny' | 'regular' | 'relaxed' | 'baggy';

    /**
     * Whether the button is in an active state.
     */
    active?: boolean;

    /**
     * Whether the button should be disabled.
     */
    disabled?: boolean;
  }

  /**
   * Renders a Button element.
   */
  export const Button: StyledComponent<
    React.ForwardRefExoticComponent<
      JSX.IntrinsicElements['button'] & ButtonProps & React.RefAttributes<HTMLButtonElement>
    >,
    DefaultTheme,
    {},
    never
  >;

  /**
   * Renders the css needed to create a button.
   *
   * @param params Same props as passed to a button component
   */
  function createButtonStyles(
    params: ButtonProps
  ): FlattenInterpolation<ThemeProps<ButtonProps>>;
}
