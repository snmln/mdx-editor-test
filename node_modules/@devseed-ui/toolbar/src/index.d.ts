import { DefaultTheme, StyledComponent } from 'styled-components';
import { Button, ButtonProps } from '@devseed-ui/button';

import './context';

declare module '@devseed-ui/toolbar' {
  type ToolbarProps = {
    children: React.ReactNode;

    /**
     * Size property to pass to contextual enabled elements, namely
     * ToolbarButton and ToolbarIconButton.
     * @default medium
     */
    size?: ButtonProps['size'];
  };

  /**
   * Toolbar wrapper to contain all the elements. Provides support for
   * contextual size. The ToolbarButton and ToolbarIconButton will inherit the
   * `size` passed to the toolbar.
   */
  export const Toolbar: StyledComponent<
    'div',
    DefaultTheme,
    ToolbarProps,
    never
  >;

  /**
   * Element to provide a semantic grouping of toolbar elements.
   */
  export const ToolbarGroup: StyledComponent<'div', DefaultTheme, {}, never>;

  type variationProp = {
    /**
     * Color variation for the toolbar label depending of the type of background
     * the toolbar is used on.
     * @default dark
     */
    variation?: 'light' | 'dark';
  };

  /**
   * Textual label to describe toolbar actions.
   */
  export const ToolbarLabel: StyledComponent<
    'span',
    DefaultTheme,
    variationProp,
    never
  >;

  /**
   * Small vertical divider to provide some separation of concerns.
   */
  export const VerticalDivider: StyledComponent<
    'hr',
    DefaultTheme,
    variationProp,
    never
  >;

  /**
   * Button for the toolbar. Inherits all the properties of `@devseed-ui/button`
   * but also responds to size changes defined by the parent `Toolbar`.
   */
  export const ToolbarButton: typeof Button;

  /**
   * Button for the toolbar which focus on icons. Inherits all the properties of
   * `@devseed-ui/button`, has a skinny fitting by default and also responds to
   * size changes defined by the parent `Toolbar`.
   */
  export const ToolbarIconButton: StyledComponent<
    React.ForwardRefExoticComponent<
      JSX.IntrinsicElements['button'] &
        ButtonProps &
        React.RefAttributes<HTMLButtonElement> & { fitting?: never }
    >,
    DefaultTheme,
    {},
    never
  >;
}
