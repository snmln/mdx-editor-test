import React, { useCallback, useEffect } from 'react';
import T from 'prop-types';
import styled from 'styled-components';

import { themeVal, glsp } from '@devseed-ui/theme-provider';
import { Button } from '@devseed-ui/button';
import { Dropdown } from '@devseed-ui/dropdown';
import { Heading, Overline } from '@devseed-ui/typography';
import {
  CollecticonTickSmall,
  CollecticonTrashBin,
  CollecticonXmarkSmall
} from '@devseed-ui/collecticons';

import Tabs from './Tabs';
import Calendar from './Calendar';
import DirectDateInput from './DirectDateInput';

import { formatDateLabel, prepareInputDates, useSafeState } from './utils';

const DropdownDatePicker = styled(Dropdown)`
  && {
    max-width: none;
    width: auto;
    min-width: 20rem;
    display: grid;
    grid-gap: ${glsp()};
  }
`;

const DropHeader = styled.header`
  display: grid;
  grid-gap: ${glsp()};
  box-shadow: 0 1px 0 0 ${themeVal('color.base-100a')};
  margin: ${glsp(-1, -1, 0, -1)};
  padding: ${glsp()};
`;

const DropHeadline = styled.div`
  display: grid;
  align-items: center;
  grid-template-columns: 1fr 1fr;
`;

const DropFooterActions = styled.div`
  display: flex;
  gap: ${glsp(0.5)};
  box-shadow: 0 -1px 0 0 ${themeVal('color.base-100a')};
  justify-content: flex-end;
  margin: ${glsp(0, -1, -1, -1)};
  padding: ${glsp()};
`;

const ClearButton = styled(Button)`
  margin-right: auto;
`;

const DropTitle = styled(Heading)`
  margin: 0;
  grid-column: 1 / -1;
`;

const DropBody = styled.div``;

const EMPTY_DATE = { start: null, end: null };

const DatePicker = (props) => {
  const {
    id,
    className,
    isRange,
    view,
    min,
    max,
    value: rawVal,
    onCancel,
    onConfirm,
    onDateChange,
    renderTriggerElement,
    direction,
    alignment,
    onChange,
    renderAdditionalContent,
    datesToRestrict,
    restrictMode,
    isClearable,
    ...rest
  } = props;

  const value = prepareInputDates(rawVal, { isRange, view });

  const tabs = [
    {
      id: 'calendar',
      label: 'Calendar'
    },
    {
      id: 'input',
      label: 'Input'
    }
  ];

  const [activeTab, setActiveTab] = useSafeState(tabs[0].id);

  const [draftDate, setDraftDate] = useSafeState(value);

  // Update value. Use a string for comparison.
  const inputEncoded = JSON.stringify(value);
  useEffect(() => {
    setDraftDate(value);
    // value and inputEncoded and connected. There's no need to track value.
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [inputEncoded]);

  const onCancelButtonClick = useCallback(() => {
    // Reset to draft.
    setDraftDate(value);
    onCancel && onCancel();
    // value and inputEncoded and connected. There's no need to track value.
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, [onCancel, inputEncoded]);

  const onConfirmButtonClick = useCallback(() => {
    onConfirm(draftDate);
  }, [onConfirm, draftDate]);

  const triggerElement =
    typeof renderTriggerElement === 'function'
      ? (props) =>
          renderTriggerElement(props, formatDateLabel(value, { view, isRange }))
      : /* eslint-disable-next-line react/display-name */
        (props) => (
          <Button
            variation='base-text'
            title={isRange ? 'Select date range' : 'Select date'}
            {...props}
          >
            {formatDateLabel(value, { view, isRange })}
          </Button>
        );

  const onDraftDateChange = useCallback(
    (value) => {
      setDraftDate(value);
      typeof onDateChange === 'function' && onDateChange(value);
    },
    // setDraftDate will never change.
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
    [onDateChange]
  );

  const onClearButtonClick = useCallback(() => {
    setDraftDate(EMPTY_DATE);
    // setDraftDate will never change.
    /* eslint-disable-next-line react-hooks/exhaustive-deps */
  }, []);

  return (
    <DropdownDatePicker
      className={className}
      id={id}
      alignment={alignment}
      direction={direction}
      triggerElement={triggerElement}
      onChange={(isOpen) => {
        // When the drop closes, reset the tab.
        !isOpen && setActiveTab(tabs[0].id);
        // Allow implementers to extend dropdown functionality
        typeof onChange === 'function' && onChange(isOpen);
      }}
      {...rest}
    >
      <DropHeader>
        <DropHeadline>
          <Overline>{isRange ? 'Select date range' : 'Select date'}</Overline>
          <DropTitle size='xsmall' data-testid='devseedui-current-date'>
            {formatDateLabel(draftDate, { view, isRange })}
          </DropTitle>
        </DropHeadline>
        <Tabs tabs={tabs} onChange={setActiveTab} selectedTab={activeTab} />
      </DropHeader>
      <DropBody>
        {activeTab === 'calendar' && (
          <Calendar
            id={`${id}-calendar`}
            value={draftDate}
            onChange={onDraftDateChange}
            isRange={isRange}
            view={view}
            min={min}
            max={max}
            datesToRestrict={datesToRestrict}
            restrictMode={restrictMode}
          />
        )}
        {activeTab === 'input' && (
          <DirectDateInput
            id={`${id}-input`}
            value={draftDate}
            onChange={onDraftDateChange}
            isRange={isRange}
            view={view}
            min={min}
            max={max}
            datesToRestrict={datesToRestrict}
            restrictMode={restrictMode}
          />
        )}

        {typeof renderAdditionalContent === 'function' &&
          renderAdditionalContent({ tab: activeTab })}
      </DropBody>

      <DropFooterActions>
        {isClearable && (
          <ClearButton
            variation='base-text'
            size='small'
            onClick={onClearButtonClick}
            aria-label='Clear date selection'
          >
            <CollecticonTrashBin title='Clear date selection' meaningful />{' '}
            Clear
          </ClearButton>
        )}
        <Button
          variation='base-outline'
          size='small'
          onClick={onCancelButtonClick}
          data-dropdown='click.close'
          aria-label='Cancel date selection'
        >
          <CollecticonXmarkSmall title='Cancel date selection' meaningful />{' '}
          Cancel
        </Button>
        <Button
          variation='primary-fill'
          size='small'
          onClick={onConfirmButtonClick}
          data-dropdown='click.close'
          aria-label='Save date selection'
        >
          <CollecticonTickSmall title='Save date selection' meaningful /> Save
        </Button>
      </DropFooterActions>
    </DropdownDatePicker>
  );
};

DatePicker.propTypes = {
  className: T.string,
  id: T.string,
  isRange: T.bool,
  view: T.oneOf(['month', 'year', 'decade']),
  min: T.instanceOf(Date),
  max: T.instanceOf(Date),
  value: T.oneOfType([
    T.instanceOf(Date),
    T.shape({
      start: T.instanceOf(Date),
      end: T.instanceOf(Date)
    })
  ]),
  onCancel: T.func,
  onConfirm: T.func,
  onDateChange: T.func,
  renderTriggerElement: T.func,
  renderAdditionalContent: T.func,
  datesToRestrict: T.arrayOf(T.instanceOf(Date)),
  restrictMode: T.oneOf(['enable', 'disable']),
  isClearable: T.bool,
  onChange: T.func,
  direction: T.oneOf(['up', 'down', 'left', 'right']),
  alignment: T.oneOf(['left', 'center', 'right', 'top', 'middle', 'bottom'])
};

DatePicker.defaultProps = {
  direction: 'down',
  alignment: 'center',
  restrictMode: 'disable'
};

export default DatePicker;
