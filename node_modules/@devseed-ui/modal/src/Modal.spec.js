import React from 'react';
import { renderToString } from 'react-dom/server';
import { screen, cleanup } from '@testing-library/react';
import userEvent from '@testing-library/user-event';

import { Modal } from '.';
import renderWithTheme from '../../../test/_setup-theme-provider';

const originalFn = Modal.generateUUID;
afterAll(() => {
  cleanup();
  Modal.generateUUID = originalFn;
});

describe('<Modal />', () => {
  it('should not show modal', () => {
    renderWithTheme(<Modal id='modal' title='A modal' />);
    const modalTitle = screen.queryByText('A modal');
    expect(modalTitle).not.toBeInTheDocument();
    const closeBtn = screen.queryByRole('button', { name: 'Close modal' });
    expect(closeBtn).not.toBeInTheDocument();
  });

  it('should not show modal when revealed', () => {
    renderWithTheme(<Modal id='modal' title='A modal' revealed />);
    const modalTitle = screen.queryByText('A modal');
    expect(modalTitle).toBeInTheDocument();
  });

  it('renders working close button', async () => {
    const onCloseClick = jest.fn();

    renderWithTheme(
      <Modal
        id='modal'
        title='A modal'
        revealed
        closeButton
        onCloseClick={onCloseClick}
      />
    );

    // screen.logTestingPlaygroundURL();

    const closeBtn = await screen.findByRole('button', {
      name: /close modal/i
    });
    userEvent.click(closeBtn);
    expect(onCloseClick).toBeCalledTimes(1);
  });

  it('calls onCloseClick on ESC', () => {
    const onCloseClick = jest.fn();

    renderWithTheme(
      <Modal
        id='modal'
        title='A modal'
        revealed
        closeButton
        onCloseClick={onCloseClick}
      />
    );

    userEvent.type(document.body, '{esc}');
    expect(onCloseClick).toBeCalledTimes(1);
  });

  it('closes via custom close button', async () => {
    const onCloseClick = jest.fn();

    renderWithTheme(
      <Modal
        id='test-id'
        revealed
        title='The title'
        onCloseClick={onCloseClick}
        renderBody={(bag) => (
          <button onClick={bag.close} id='custom-close'>
            custom close
          </button>
        )}
      />
    );

    const closeBtn = await screen.findByRole('button', {
      name: 'custom close'
    });
    userEvent.click(closeBtn);
    expect(onCloseClick).toBeCalledTimes(1);
  });

  it('captures click on overlay', () => {
    const overlayCallBack = jest.fn();

    renderWithTheme(
      <Modal
        id='test-id'
        revealed
        title='The title'
        onOverlayClick={overlayCallBack}
      />
    );

    const overlay = document.querySelector('#test-id');
    userEvent.click(overlay);
    expect(overlayCallBack).toBeCalledTimes(1);
  });

  it('renders a basic modal', async () => {
    Modal.generateUUID = () => 'test-uuid';
    const renderedComponent = renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        onCloseClick={() => {}}
        title='Very basic modal'
        content={<p>Simple modal with a title and some content</p>}
        footerContent={<p>The footer</p>}
      />
    );
    expect(renderedComponent.baseElement).toMatchSnapshot();
  });

  it('renders header with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        closeButton
        onCloseClick={() => {}}
        title='Very basic modal'
        renderHeader={() => <h2>Header</h2>}
        content={<p>Simple modal with a title and some content</p>}
        footerContent={<p>The footer</p>}
      />
    );

    expect(screen.queryByText('Very basic modal')).not.toBeInTheDocument();
    expect(screen.queryByText('Header')).toBeInTheDocument();
    const closeBtn = await screen.queryByRole('button', {
      name: /close modal/i
    });
    expect(closeBtn).not.toBeInTheDocument();
  });

  it('renders headline with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        closeButton
        onCloseClick={() => {}}
        title='Very basic modal'
        renderHeadline={() => <h2>Header</h2>}
        content={<p>Simple modal with a title and some content</p>}
        footerContent={<p>The footer</p>}
      />
    );

    expect(screen.queryByText('Very basic modal')).not.toBeInTheDocument();
    expect(screen.queryByText('Header')).toBeInTheDocument();
    const closeBtn = await screen.findByRole('button', {
      name: /close modal/i
    });
    expect(closeBtn).toBeInTheDocument();
  });

  it('renders body with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        onCloseClick={() => {}}
        title='Very basic modal'
        content={<p>Prop body</p>}
        renderBody={() => <p>Function body</p>}
        footerContent={<p>The footer</p>}
      />
    );
    expect(screen.queryByText('Prop body')).not.toBeInTheDocument();
    expect(screen.queryByText('Function body')).toBeInTheDocument();
  });

  it('renders content with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        onCloseClick={() => {}}
        title='Very basic modal'
        content={<p>Prop body</p>}
        renderContents={() => <p>Function content</p>}
        footerContent={<p>The footer</p>}
      />
    );
    expect(screen.queryByText('Very basic modal')).not.toBeInTheDocument();
    expect(screen.queryByText('Prop body')).not.toBeInTheDocument();
    expect(screen.queryByText('The footer')).not.toBeInTheDocument();
    expect(screen.queryByText('Function content')).toBeInTheDocument();
  });

  it('renders footer with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        onCloseClick={() => {}}
        title='Very basic modal'
        content={<p>Prop content</p>}
        footerContent={<p>Prop footer</p>}
        renderFooter={() => <p>Function footer</p>}
      />
    );
    expect(screen.queryByText('Prop footer')).not.toBeInTheDocument();
    expect(screen.queryByText('Function footer')).toBeInTheDocument();
  });

  it('renders toolbar with function', async () => {
    renderWithTheme(
      <Modal
        id='modal'
        size='medium'
        revealed
        closeButton
        onCloseClick={() => {}}
        title='Very basic modal'
        content={<p>Prop content</p>}
        footerContent={<p>Prop footer</p>}
        renderToolbar={() => (
          <div>
            <button>Custom close</button>
          </div>
        )}
      />
    );
    const closeBtn = screen.queryByRole('button', {
      name: /close modal/i
    });
    expect(closeBtn).not.toBeInTheDocument();
    const custom = await screen.findByRole('button', {
      name: /custom close/i
    });
    expect(custom).toBeInTheDocument();
  });

  it('renders SSR compatible <Modal />', () => {
    const renderOnServer = () => renderToString(<Modal id='modal' revealed />);
    expect(renderOnServer).not.toThrow();
  });
});
