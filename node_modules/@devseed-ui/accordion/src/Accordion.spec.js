import React from 'react';
import { cleanup, fireEvent } from '@testing-library/react';

import { AccordionManager, AccordionFold, useAccordion } from '.';
import renderWithTheme from '../../../test/_setup-theme-provider';

afterAll(cleanup);

const getElMaxHeight = (e) => window.getComputedStyle(e)['max-height'];

describe('<Accordion />', () => {
  it('should render default the accordion', () => {
    const renderedComponent = renderWithTheme(
      <AccordionManager>
        <AccordionFold
          headingAs='h3'
          id='fold-a'
          title='A'
          content={<p>Content A</p>}
        />
        <AccordionFold
          headingAs='h3'
          id='fold-b'
          title='B'
          content={<p>Content B</p>}
        />
      </AccordionManager>
    );

    expect(renderedComponent.baseElement).toMatchSnapshot();
  });

  it('should open folds on click', async () => {
    const renderedComponent = renderWithTheme(
      <AccordionManager>
        <AccordionFold
          headingAs='h3'
          id='fold-a'
          title='A'
          content={<p>Content A</p>}
        />
        <AccordionFold
          headingAs='h3'
          id='fold-b'
          title='B'
          content={<p>Content B</p>}
        />
      </AccordionManager>
    );

    const query = (s) => renderedComponent.container.querySelector(s);

    const triggerA = query('#fold-a button');
    const bodyA = query('#fold-a > div[id$="-content"]');
    const triggerB = query('#fold-b button');
    const bodyB = query('#fold-b > div[id$="-content"]');

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');

    fireEvent.click(triggerA);

    expect(getElMaxHeight(bodyA)).toBe('400vh');
    expect(triggerA).toHaveAttribute('aria-expanded', 'true');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');

    fireEvent.click(triggerB);

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('400vh');
    expect(triggerB).toHaveAttribute('aria-expanded', 'true');

    fireEvent.click(triggerB);

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');
  });

  it('should allow multiple folds', async () => {
    const renderedComponent = renderWithTheme(
      <AccordionManager allowMultiple>
        <AccordionFold
          headingAs='h3'
          id='fold-a'
          title='A'
          content={<p>Content A</p>}
        />
        <AccordionFold
          headingAs='h3'
          id='fold-b'
          title='B'
          content={<p>Content B</p>}
        />
      </AccordionManager>
    );

    const query = (s) => renderedComponent.container.querySelector(s);

    const triggerA = query('#fold-a button');
    const bodyA = query('#fold-a > div[id$="-content"]');
    const triggerB = query('#fold-b button');
    const bodyB = query('#fold-b > div[id$="-content"]');

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');

    fireEvent.click(triggerA);

    expect(getElMaxHeight(bodyA)).toBe('400vh');
    expect(triggerA).toHaveAttribute('aria-expanded', 'true');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');

    fireEvent.click(triggerB);

    expect(getElMaxHeight(bodyA)).toBe('400vh');
    expect(triggerA).toHaveAttribute('aria-expanded', 'true');
    expect(getElMaxHeight(bodyB)).toBe('400vh');
    expect(triggerB).toHaveAttribute('aria-expanded', 'true');

    fireEvent.click(triggerB);

    expect(getElMaxHeight(bodyA)).toBe('400vh');
    expect(triggerA).toHaveAttribute('aria-expanded', 'true');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');
  });

  it('should respect the initial state', () => {
    const renderedComponent = renderWithTheme(
      <AccordionManager>
        <AccordionFold
          headingAs='h3'
          id='fold-a'
          title='A'
          content={<p>Content A</p>}
        />
        <AccordionFold
          headingAs='h3'
          id='fold-b'
          title='B'
          content={<p>Content B</p>}
          initialOpen
        />
      </AccordionManager>
    );

    expect(renderedComponent.baseElement).toMatchSnapshot();
  });

  it('should expand and close all', async () => {
    function AccordionGlobalControls() {
      const { expandAll, collapseAll } = useAccordion();

      return (
        <>
          <button id='expand-all' onClick={expandAll}>
            Expand All
          </button>
          <button id='collapse-all' onClick={collapseAll}>
            Collapse All
          </button>
        </>
      );
    }

    const renderedComponent = renderWithTheme(
      <AccordionManager>
        <AccordionGlobalControls />
        <AccordionFold
          headingAs='h3'
          id='fold-a'
          title='A'
          content={<p>Content A</p>}
        />
        <AccordionFold
          headingAs='h3'
          id='fold-b'
          title='B'
          content={<p>Content B</p>}
        />
      </AccordionManager>
    );

    const query = (s) => renderedComponent.container.querySelector(s);
    const triggerA = query('#fold-a button');
    const bodyA = query('#fold-a > div[id$="-content"]');
    const triggerB = query('#fold-b button');
    const bodyB = query('#fold-b > div[id$="-content"]');
    const triggerExpand = query('#expand-all');
    const triggerCollapse = query('#collapse-all');

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');

    fireEvent.click(triggerExpand);

    expect(getElMaxHeight(bodyA)).toBe('400vh');
    expect(triggerA).toHaveAttribute('aria-expanded', 'true');
    expect(getElMaxHeight(bodyB)).toBe('400vh');
    expect(triggerB).toHaveAttribute('aria-expanded', 'true');

    fireEvent.click(triggerCollapse);

    expect(getElMaxHeight(bodyA)).toBe('0');
    expect(triggerA).toHaveAttribute('aria-expanded', 'false');
    expect(getElMaxHeight(bodyB)).toBe('0');
    expect(triggerB).toHaveAttribute('aria-expanded', 'false');
  });
});
