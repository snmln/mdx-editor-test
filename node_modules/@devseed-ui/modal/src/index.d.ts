import { DefaultTheme, StyledComponent } from 'styled-components';
import { Toolbar } from '@devseed-ui/toolbar';

interface ModalRenderPropsParams {
  close: (e: React.SyntheticEvent) => void;
}

declare module '@devseed-ui/modal' {
  export type ModalProps = JSX.IntrinsicElements['section'] & {
    /**
     * An id for the modal
     */
    id: string;

    /**
     * Whether or not the modal is visible.
     */
    revealed: boolean;

    /**
     * The modal size.
     * @default "medium"
     */
    size?: 'small' | 'medium' | 'large' | 'xlarge' | 'fullscreen';

    /**
     * Whether or not the modal should render the default close button.
     * @default true
     */
    closeButton?: boolean;

    /**
     * Disables the use of keyboard to close the modal
     * @default false
     */
    disableKeyboardClose?: boolean;

    /**
     * Title for the modal.
     * Required unless the header is being overridden.
     */
    title?: React.ReactNode;

    /**
     * Modal body content, rendered inside `ModalBody`.
     * Required unless the header is being overridden.
     */
    content?: React.ReactNode;

    /**
     * Modal footer content, rendered inside `ModalFooter`.
     * Required unless the header is being overridden.
     */
    footerContent?: React.ReactNode;

    /**
     * Callback function for overlay click. Defaults to `onCloseClick` when
     * not provided.
     */
    onOverlayClick?: (e: React.SyntheticEvent) => void;

    /**
     * Callback function for close button click and ESC keypress.
     */
    onCloseClick?: (e: React.SyntheticEvent) => void;

    /**
     * Overrides the contents of the modal.
     * Anything returned by this function is rendered inside `ModalContents`.
     */
    renderContents?: (helpers: ModalRenderPropsParams) => JSX.Element;

    /**
     * Overrides the modal header element.
     * Anything returned by this function is rendered instead of `ModalHeader`.
     */
    renderHeader?: (helpers: ModalRenderPropsParams) => JSX.Element;

    /**
     * Overrides the modal headline element.
     * Anything returned by this function is rendered instead of `ModalHeadline`.
     */
    renderHeadline?: (helpers: ModalRenderPropsParams) => JSX.Element;

    /**
     * Overrides the modal toolbar element.
     * Anything returned by this function is rendered instead of `ModalToolbar`.
     */
    renderToolbar?: (helpers: ModalRenderPropsParams) => JSX.Element;

    /**
     * Overrides the modal body element.
     * Anything returned by this function is rendered instead of `ModalBody`.
     */
    renderBody?: (helpers: ModalRenderPropsParams) => JSX.Element;

    /**
     * Overrides the modal footer element.
     * Anything returned by this function is rendered instead of `ModalFooter`.
     */
    renderFooter?: (helpers: ModalRenderPropsParams) => JSX.Element;
  }

  /**
   * React modal component. 
   * Displays a modal component which is portaled to the body to ensure is
   * appears over all other elements
   * 
   * @param {ModalProps} props Props for the modal
   */
  function Modal(props: ModalProps): JSX.Element;

  /**
   * Styled component for the modal header.
   * Renders `<header>`
   */
  export const ModalHeader: StyledComponent<'header', DefaultTheme, {}, never>

  /**
   * Styled component for the modal headline.
   * Renders `<div>`
   */
  export const ModalHeadline: StyledComponent<'div', DefaultTheme, {}, never>

  /**
   * Styled component for the modal Toolbar.
   * Renders `Toolbar`.
   * 
   * @see devseed-ui/toolbar
   */
  export const ModalToolbar: typeof Toolbar

  /**
   * Styled component for the modal body.
   * Renders `<div>`
   */
  export const ModalBody: StyledComponent<'div', DefaultTheme, {}, never>

  /**
   * Styled component for the modal footer.
   * Renders `<footer>`
   */
  export const ModalFooter: StyledComponent<'footer', DefaultTheme, {}, never>
}
