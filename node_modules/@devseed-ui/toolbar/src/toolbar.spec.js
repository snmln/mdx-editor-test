import React from 'react';
import { cleanup } from '@testing-library/react';
import { screen } from '@testing-library/dom';

import { CollecticonTick } from '@devseed-ui/collecticons';

import renderWithTheme from '../../../test/_setup-theme-provider';
import {
  Toolbar,
  ToolbarIconButton,
  ToolbarButton,
  VerticalDivider,
  ToolbarLabel
} from '.';

afterAll(cleanup);

describe('<Toolbar />', () => {
  it('should render a basic toolbar', async () => {
    const renderedComponent = renderWithTheme(
      <Toolbar data-prop='custom-prop'>
        <ToolbarLabel>Toolbar label</ToolbarLabel>
        <ToolbarIconButton useIcon='ellipsis-vertical'>
          More options
        </ToolbarIconButton>
        <VerticalDivider />
        <ToolbarButton useIcon='pencil'>Edit</ToolbarButton>
      </Toolbar>
    );

    expect(renderedComponent.container).toMatchSnapshot();
  });

  it('should allow size prop on ToolbarIconButton and ToolbarButton when Toolbar size is not set', async () => {
    renderWithTheme(
      <Toolbar>
        <ToolbarLabel>Toolbar label</ToolbarLabel>
        <ToolbarIconButton useIcon='ellipsis-vertical' size='large'>
          More options
        </ToolbarIconButton>
        <VerticalDivider />
        <ToolbarButton useIcon='pencil'>Edit</ToolbarButton>
      </Toolbar>
    );

    const button = screen.getByText('More options');
    const css = getComputedStyle(button);
    expect(css.height).toEqual('2.5rem');
  });

  it('should change the size of ToolbarIconButton and ToolbarButton when property is provided', async () => {
    renderWithTheme(
      <Toolbar size='large'>
        <ToolbarLabel>Toolbar label</ToolbarLabel>
        <ToolbarIconButton useIcon='ellipsis-vertical'>
          More options
        </ToolbarIconButton>
        <VerticalDivider />
        <ToolbarButton useIcon='pencil'>Edit</ToolbarButton>
      </Toolbar>
    );

    const button = screen.getByText('More options');
    const css = getComputedStyle(button);
    expect(css.height).toEqual('2.5rem');
  });

  it('should ignore size prop on ToolbarIconButton and ToolbarButton when Toolbar size is set', async () => {
    renderWithTheme(
      <Toolbar size='small'>
        <ToolbarIconButton useIcon='ellipsis-vertical' size='large'>
          <CollecticonTick title='Confirm' meaningful />
          More options
        </ToolbarIconButton>
      </Toolbar>
    );

    const button = screen.getByText('More options');
    const css = getComputedStyle(button);
    expect(css.height).toEqual('1.5rem');
  });

  it('should not pass size prop to custom components', async () => {
    /* eslint-disable-next-line react/prop-types */
    const PrintSizeProp = ({ size }) => <span>{size || 'ok!'}</span>;

    renderWithTheme(
      <Toolbar size='small'>
        <PrintSizeProp />
      </Toolbar>
    );

    expect(screen.queryByText('ok!')).toBeInTheDocument();
    expect(screen.queryByText('small')).not.toBeInTheDocument();
  });
});
