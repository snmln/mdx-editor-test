import React from 'react';
import T from 'prop-types';
import styled, { css } from 'styled-components';

import { themeVal, glsp, listReset } from '@devseed-ui/theme-provider';

const TabsSelf = styled.div`
  display: flex;
  width: 100%;
  margin-bottom: ${glsp(-1)};
  align-items: flex-start;
`;

const TabsList = styled.ul`
  ${listReset()}
  display: grid;
  grid-auto-columns: min-content;
  grid-gap: ${glsp()};

  li {
    grid-row: 1;
  }
`;

const TabsActions = styled.div`
  margin-top: ${glsp(-0.5)};
  margin-left: auto;
  padding-left: ${glsp()};
`;

const TabLink = styled.a`
  position: relative;
  display: block;
  padding: ${glsp(0, 0, 0.5, 0)};
  font-size: 0.875rem;
  line-height: 1rem;
  font-weight: ${themeVal('type.base.bold')};
  text-transform: uppercase;
  text-decoration: none;

  &,
  &:visited {
    color: inherit;
  }

  &::after {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 2px;
    width: 0;
    content: '';
    background: ${themeVal('color.link')};
    transition: all 0.16s ease-in-out 0s;

    ${({ active }) =>
      active &&
      css`
        width: 100%;
      `}
  }
`;

export default function Tabs(props) {
  const { tabs, className, onChange, selectedTab, renderTabActions } = props;

  let tabActionsContent = null;

  if (typeof renderTabActions === 'function') {
    const tab = tabs.find((t) => t.id === selectedTab);
    const content = renderTabActions({ tab });
    tabActionsContent = content ? <TabsActions>{content}</TabsActions> : null;
  }

  return (
    <TabsSelf className={className}>
      <TabsList>
        {tabs.map((t) => (
          <li key={t.id}>
            <TabLink
              href='#'
              onClick={(e) => {
                e.preventDefault();
                onChange(t.id);
              }}
              title={`Select ${t.label} tab`}
              active={selectedTab === t.id}
            >
              {t.label}
            </TabLink>
          </li>
        ))}
      </TabsList>
      {tabActionsContent}
    </TabsSelf>
  );
}

Tabs.propTypes = {
  className: T.string,
  tabs: T.arrayOf(
    T.shape({
      id: T.string,
      label: T.string
    })
  ),
  renderTabActions: T.func,
  onChange: T.func,
  selectedTab: T.string
};
