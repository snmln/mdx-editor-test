import { DefaultTheme, StyledComponent } from 'styled-components';

interface accordionRenderPropsParams {
  /**
   * Id of the fold's content area
   */
  contentId: string;

  /**
   * Whether or not the fold is expanded
   */
  isExpanded: boolean;

  /**
   * Set the new state for this fold
   */
  setExpandedState: (state: boolean) => void;

  /**
   * Toggle current state
   */
  toggleExpanded: () => void;
}

declare module '@devseed-ui/accordion' {
  export interface AccordionManagerProps {
    children?: React.ReactNode;

    /**
     * Whether to open the contents of the accordion on mount.
     */
    allowMultiple?: boolean;
  }

  /**
   * Accordion Manager must wrap the Accordion Folds and stores the data needed
   * for the accordions to work.
   * Since the Accordion component is only a state manager it is recommended
   * that accordion folds are structured as list items for semantic value.
   *
   * @param {AccordionManagerProps} props Props for the accordion manager
   */
  function AccordionManager(props: AccordionManagerProps): JSX.Element;

  export type AccordionProps = JSX.IntrinsicElements['div'] & {
    children?: React.ReactNode;

    /**
     * An id for the accordion fold
     */
    id: string;

    /**
     * Title to use on the fold header.
     * Required unless `renderHeader` is being used.
     */
    title?: React.ReactNode;

    /**
     * Heading level for the title of the accordion.
     * Required unless `renderHeader` is being used.
     */
    headingAs?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';

    /**
     * Content for the fold.
     * Required unless `renderBody` is being used.
     */
    content?: React.ReactNode;

    /**
     * Whether to open the contents of the accordion on mount.
     */
    initialOpen?: boolean;

    /**
     * Overrides the accordion header element.
     * Anything returned by this function is rendered instead of `AccordionFoldHeader`.
     */
    renderHeader?: (helpers: accordionRenderPropsParams) => React.ReactNode;

    /**
     * Overrides the accordion body inner element.
     * Anything returned by this function is rendered instead of `AccordionFoldBodyInner`.
     */
    renderBody?: (helpers: accordionRenderPropsParams) => React.ReactNode;
  };

  /**
   * React accordion fold component.
   * Fold component to be used under AccordionManager
   *
   * @param {AccordionProps} props Props for the accordion fold
   */
  export const AccordionFold: StyledComponent<
    'div',
    DefaultTheme,
    AccordionProps,
    never
  >;

  /**
   * Styled component for the accordion header.
   * Renders `<header>`
   */
  export const AccordionFoldHeader: StyledComponent<
    'header',
    DefaultTheme,
    {},
    never
  >;

  /**
   * Styled component for the accordion trigger button.
   * Includes styles to handle the rotation of CollecticonChevronDownSmall
   * Renders `<button>`
   */
  export const AccordionFoldTrigger: StyledComponent<
    'button',
    DefaultTheme,
    {},
    never
  >;

  /**
   * Styled component for the accordion body inner component.
   * Renders `<div>`
   */
  export const AccordionFoldBodyInner: StyledComponent<
    'div',
    DefaultTheme,
    {},
    never
  >;

  /**
   * Hook to manage accordion folds.
   * Mostly for internal use. You shouldn't need this.
   */
  function useAccordionFold(
    foldId: string,
    initialOpen: boolean
  ): {
    /**
     * Whether or not the fold is expanded
     */
    isExpanded: boolean;

    /**
     * Set the new state for this fold
     */
    setExpandedState: (state: boolean) => void;

    /**
     * Toggle current state
     */
    toggleExpanded: () => void;
  };

  /**
   * Hook to manage the whole accordion.
   */
  function useAccordion(): {
    /**
     * Expand all folds.
     */
    expandAll: () => void;

    /**
     * Collapse all folds.
     */
    collapseAll: () => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * List of all registered folds.
     */
    foldList: Array<string>;

    /**
     * Mostly for internal use. You shouldn't need this.
     * List of all expanded folds.
     */
    expandedFolds: Array<string>;

    /**
     * Mostly for internal use. You shouldn't need this.
     * Setter for foldList
     */
    setFoldList: (any) => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * Setter for expandedFolds.
     */
    setExpandedFolds: (any) => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * Register a new fold.
     */
    registerFold: (fold: { id: string; expanded: boolean }) => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * Unregister fold.
     */
    unregisterFold: (fold: { id: string }) => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * If looking to manage an individual fold use: `useAccordionFold`.
     * Set the state of a given fold.
     */
    setExpandedState: (fold: { id: string; expanded: boolean }) => void;

    /**
     * Mostly for internal use. You shouldn't need this.
     * If looking to manage an individual fold use: `useAccordionFold`.
     * Toggle the state of a given fold.
     */
    toggleExpanded: (fold: { id: string }) => void;
  };
}
