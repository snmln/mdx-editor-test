import * as styled_components from 'styled-components';
import * as _devseed_ui_button from '@devseed-ui/button';
import { ButtonProps } from '@devseed-ui/button';
import React from 'react';

declare const VerticalDivider: styled_components.StyledComponent<"hr", styled_components.DefaultTheme, {
    variation: 'light' | 'dark';
}, never>;

declare type ToolbarComponentProps = JSX.IntrinsicElements['div'] & {
    size?: ButtonProps['size'];
};
declare function ToolbarComponent({ className, children, size, ...rest }: ToolbarComponentProps): JSX.Element;
declare const Toolbar: styled_components.StyledComponent<typeof ToolbarComponent, styled_components.DefaultTheme, {}, never>;
declare const ToolbarGroup: styled_components.StyledComponent<"div", styled_components.DefaultTheme, {
    role: React.AriaRole;
}, "role">;
declare const ToolbarLabel: styled_components.StyledComponent<"span", styled_components.DefaultTheme, {
    variation?: "light" | "dark" | undefined;
}, never>;
declare const ToolbarButton: styled_components.StyledComponent<React.ForwardRefExoticComponent<Pick<ButtonProps, keyof ButtonProps> & React.RefAttributes<typeof _devseed_ui_button.Button>>, styled_components.DefaultTheme, {}, never>;
declare const ToolbarIconButton: styled_components.StyledComponent<React.ForwardRefExoticComponent<Pick<ButtonProps, keyof ButtonProps> & React.RefAttributes<typeof _devseed_ui_button.Button>>, styled_components.DefaultTheme, {
    fitting: string;
}, "fitting">;

export { Toolbar, ToolbarButton, ToolbarGroup, ToolbarIconButton, ToolbarLabel, VerticalDivider };
