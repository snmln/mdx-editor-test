import { DropdownProps } from "@devseed-ui/dropdown";

interface PickerDateValue {
  start: Date | null;
  end: Date | null;
}

declare module '@devseed-ui/date-picker' {
  export interface BaseDatePickerProps {
    /**
     * Defines the view the calendar is displaying, not what the user is
     * picking. For `month`, the month\'s days are displayed and the user picks
     * one. For `year`, the month list is displayed and the user picks one, and
     * so on.
     *
     * @default "month"
     */
    view?: 'month' | 'year' | 'decade';

    /**
     * Whether the picker should allow date range.
     *
     * @default "false"
     */
    isRange?: boolean;

    /**
     * Value for the datepicker. The value will always be an object with
     * `{start, end}`. If the value is not a range, both values will be the
     * same.
     */
    value: PickerDateValue;

    /**
     * The minimum date that can be selected.
     */
    min?: Date;

    /**
     * The maximum date that can be selected.
     */
    max?: Date;

    /**
     * List of dates to restrict the behavior of the calendar. These dates can
     * be disabled or enabled depending on the value of `restrictMode`.
     */
    datesToRestrict?: Date[];

    /**
     * Defines the behavior of the dates defined through the `datesToRestrict`
     * property.
     *
     * @default "disable"
     */
    restrictMode?: 'enable' | 'disable',

    /**
     * Allows the selected date to be cleared
     *
     * @default "false"
     */
    isClearable?: boolean,
  }

  export interface CalendarDatePickerProps extends BaseDatePickerProps {
    /**
     * Callback for when the date is selected. This is called with an object
     * `{start: Date, end: Date}`. If not in range mode, both values will be the
     * same.
     */
    onChange: (value: PickerDateValue) => void;
  }

  export interface DropdownDatePickerProps extends DropdownProps, BaseDatePickerProps {
    /**
     * Callback for when the date selection is confirmed. This is called with an
     * object `{start: Date, end: Date}`. If not in range mode, both values will
     * be the same.
     */
    onConfirm: (value: PickerDateValue) => void;

    /**
     * Callback for when the date selection is cancelled. This is triggered when
     * the X icon is clicked. The internal draft value is reset.
     */
    onCancel?: () => void;

    /**
     * Callback for when the date selection changes. This is to be used if the
     * draft date need to be controlled. This is called with an object `{start:
     * Date, end: Date}`. If not in range mode, both values will be the same.
     */
    onDateChange?: (value: PickerDateValue) => void;

    /**
     * A function that returns a trigger element. The function is called with
     * (props, label). The `props` must be spread onto the returning element.
     *
     * @default (props) => <Button {...props}>{label}</Button>
     */
    renderTriggerElement?: (props, label: React.ReactNode) => JSX.Element;

    /**
     * Additional content to render after the calendar/direct input. The
     * function receives props as argument: `{ tab: Current Tab }`
     */
    renderAdditionalContent?: (helpers: { tab: string }) => React.ReactNode;
  }

  /**
   * React date picker component.
   * Displays a datepicker element. It can be used as to pick a single date or a
   * date range. It has support for calendar view and direct input.
   *
   * @param {DropdownDatePickerProps} props Props for the date picker
   */
  function DatePicker(props: DropdownDatePickerProps): JSX.Element;

  /**
   * Standalone calendar component.
   * Same as used inside the date picker
   *
   * @param {CalendarDatePickerProps} props Props for the calendar
   */
  function Calendar(props: CalendarDatePickerProps): JSX.Element;
}
