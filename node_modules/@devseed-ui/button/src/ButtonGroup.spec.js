import React from 'react';
import { cleanup } from '@testing-library/react';

import { Button, ButtonGroup } from '.';
import renderWithTheme from '../../../test/_setup-theme-provider';

afterAll(cleanup);

describe('<ButtonGroup/>', () => {
  const onClick = jest.fn();
  const className = 'test-button-class';

  const renderedComponent = renderWithTheme(
    <ButtonGroup className={className} onClick={onClick} />
  );

  const renderedButton = renderedComponent.container.firstChild;

  it(`renders "${className}" in the button group's classList`, () => {
    expect(renderedButton.classList.contains(className)).toBe(true);
  });

  it(`renders inside of a div tag by default`, () => {
    expect(renderedButton.tagName.toLowerCase()).toBe('div');
  });

  it(`renders a div with the "group" role by default`, () => {
    expect(renderedButton).toHaveAttribute('role', 'group');
  });

  it(`renders a button group with a custom role`, () => {
    const { container } = renderWithTheme(<ButtonGroup role='button' />);
    expect(container.firstChild).toHaveAttribute('role', 'button');
  });

  it(`renders component inside of a React Element/HTML tag based on forwardedAs prop`, () => {
    const { container } = renderWithTheme(<ButtonGroup forwardedAs='div' />);
    const buttonGComponent = container.firstChild;
    expect(buttonGComponent.tagName.toLowerCase()).toBe('div');
  });

  it(`renders an horizontal button group`, () => {
    const rendered = renderWithTheme(<ButtonGroup orientation='horizontal' />);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it(`renders an vertical button group`, () => {
    const rendered = renderWithTheme(<ButtonGroup orientation='vertical' />);
    expect(rendered.asFragment()).toMatchSnapshot();
  });

  it(`renders buttons with props passed to group`, () => {
    const rendered = renderWithTheme(
      <ButtonGroup variation='primary-fill' size='xlarge' radius='ellipsoid'>
        <Button>One</Button>
        <Button>Two</Button>
        <Button>Three</Button>
      </ButtonGroup>
    );
    expect(rendered.asFragment()).toMatchSnapshot();
  });
});
