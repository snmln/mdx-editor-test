'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var styled = require('styled-components');
var themeProvider = require('@devseed-ui/theme-provider');
var React = require('react');
var T = require('prop-types');
var typography = require('@devseed-ui/typography');
var button = require('@devseed-ui/button');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var T__default = /*#__PURE__*/_interopDefaultLegacy(T);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

var _templateObject$1, _templateObject2$1;

var renderDividerVariation = function renderDividerVariation(_ref) {
  var variation = _ref.variation;

  if (variation === 'light') {
    return styled.css(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n      background: transparent\n        linear-gradient(\n          90deg,\n          ", ",\n          ", "\n        )\n        50% / ", " auto no-repeat;\n    "])), themeProvider.themeVal('color.surface-100a'), themeProvider.themeVal('color.surface-100a'), themeProvider.themeVal('layout.border'));
  } // Default: variation === 'dark'


  return styled.css(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n    background: transparent\n      linear-gradient(\n        90deg,\n        ", ",\n        ", "\n      )\n      50% / ", " auto no-repeat;\n  "])), themeProvider.themeVal('color.base-200a'), themeProvider.themeVal('color.base-200a'), themeProvider.themeVal('layout.border'));
};

var VerticalDivider = /*#__PURE__*/styled__default["default"].hr.withConfig({
  displayName: "vertical-divider__VerticalDivider",
  componentId: "sc-aok8iv-0"
})(["display:inline-flex;border:0;width:", ";height:", ";margin:0;", ""], themeProvider.glsp(1 / 2), themeProvider.glsp(), renderDividerVariation);

// global toolbar props, like the size.
// Context

var ToolbarContext = /*#__PURE__*/React.createContext({
  inToolbar: false
}); // Context provider

var ToolbarProvider = function ToolbarProvider(props) {
  var children = props.children,
      size = props.size;
  var contextValue = React.useMemo(function () {
    return {
      inToolbar: true,
      size: size
    };
  }, [size]);
  return /*#__PURE__*/React__default["default"].createElement(ToolbarContext.Provider, {
    value: contextValue
  }, children);
};
ToolbarProvider.propTypes = {
  children: T__default["default"].node,
  size: T__default["default"].oneOf(['small', 'medium', 'large'])
}; // Context consumer

var useToolbar = function useToolbar() {
  // It should be possible to use the hook outside the toolbar to allow
  // component reusability.
  return React.useContext(ToolbarContext);
};
var ToolbarContextButton = /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
  var _useToolbar = useToolbar(),
      size = _useToolbar.size;
  /* eslint-disable-next-line react/prop-types */


  return /*#__PURE__*/React__default["default"].createElement(button.Button, _extends({}, props, {
    size: size || props.size,
    ref: ref
  }));
});
ToolbarContextButton.displayName = 'ToolbarContextButton';

var _templateObject, _templateObject2, _templateObject3, _templateObject4;

var _excluded = ["className", "children", "size"];

function ToolbarComponent(_ref) {
  var className = _ref.className,
      children = _ref.children,
      size = _ref.size,
      rest = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React__default["default"].createElement(ToolbarProvider, {
    size: size
  }, /*#__PURE__*/React__default["default"].createElement("div", _extends({
    className: className,
    role: "toolbar"
  }, rest), children));
}

ToolbarComponent.propTypes = {
  className: T__default["default"].string,
  children: T__default["default"].node,
  size: T__default["default"].string
};

var setSpacingVariable = function setSpacingVariable(_ref2) {
  var size = _ref2.size;

  switch (size) {
    case 'small':
      return styled.css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        --toolbar-spacing: ", ";\n      "])), themeProvider.glsp(0.125));

    case 'large':
      return styled.css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        --toolbar-spacing: ", ";\n      "])), themeProvider.glsp(0.5));

    case 'xlarge':
      return styled.css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        --toolbar-spacing: ", ";\n      "])), themeProvider.glsp());
    // medium

    default:
      return styled.css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        --toolbar-spacing: ", ";\n      "])), themeProvider.glsp(0.25));
  }
};

var Toolbar = /*#__PURE__*/styled__default["default"](ToolbarComponent).withConfig({
  displayName: "toolbar__Toolbar",
  componentId: "sc-1dvjpky-0"
})(["display:flex;flex-flow:row nowrap;align-items:center;", " gap:var(--toolbar-spacing);"], setSpacingVariable);
var ToolbarGroup = /*#__PURE__*/styled__default["default"].div.attrs(function (props) {
  return {
    role: props.role || 'group'
  };
}).withConfig({
  displayName: "toolbar__ToolbarGroup",
  componentId: "sc-1dvjpky-1"
})(["all:inherit;& + &{margin-left:calc(var(--toolbar-spacing) * 4);}"]);
var ToolbarLabel = /*#__PURE__*/styled__default["default"].span.withConfig({
  displayName: "toolbar__ToolbarLabel",
  componentId: "sc-1dvjpky-2"
})(["", " ", " color:", ";"], typography.createOverlineStyles(), themeProvider.truncated(), function (_ref3) {
  var variation = _ref3.variation;
  return variation === 'light' ? themeProvider.themeVal('color.surface') : themeProvider.themeVal('color.base-400');
});
var ToolbarButton = /*#__PURE__*/styled__default["default"](ToolbarContextButton).withConfig({
  displayName: "toolbar__ToolbarButton",
  componentId: "sc-1dvjpky-3"
})([""]);
var ToolbarIconButton = /*#__PURE__*/styled__default["default"](ToolbarButton).attrs({
  fitting: 'skinny'
}).withConfig({
  displayName: "toolbar__ToolbarIconButton",
  componentId: "sc-1dvjpky-4"
})([""]);

exports.Toolbar = Toolbar;
exports.ToolbarButton = ToolbarButton;
exports.ToolbarGroup = ToolbarGroup;
exports.ToolbarIconButton = ToolbarIconButton;
exports.ToolbarLabel = ToolbarLabel;
exports.VerticalDivider = VerticalDivider;
//# sourceMappingURL=index.cjs.js.map
