'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var T = require('prop-types');
var styled = require('styled-components');
var themeProvider = require('@devseed-ui/theme-provider');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var T__default = /*#__PURE__*/_interopDefaultLegacy(T);
var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 * @private
 */


var PolishedError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(PolishedError, _Error);

  function PolishedError(code) {
    var _this;

    {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
    }

    return _assertThisInitialized(_this);
  }

  return PolishedError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function colorToInt(color) {
  return Math.round(color * 255);
}

function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}

function hslToRgb(hue, saturation, lightness, convert) {
  if (convert === void 0) {
    convert = convertToInt;
  }

  if (saturation === 0) {
    // achromatic
    return convert(lightness, lightness, lightness);
  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV


  var huePrime = (hue % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;

  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }

  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert(finalRed, finalGreen, finalBlue);
}

var namedColorMap = {
  aliceblue: 'f0f8ff',
  antiquewhite: 'faebd7',
  aqua: '00ffff',
  aquamarine: '7fffd4',
  azure: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '000',
  blanchedalmond: 'ffebcd',
  blue: '0000ff',
  blueviolet: '8a2be2',
  brown: 'a52a2a',
  burlywood: 'deb887',
  cadetblue: '5f9ea0',
  chartreuse: '7fff00',
  chocolate: 'd2691e',
  coral: 'ff7f50',
  cornflowerblue: '6495ed',
  cornsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: '00ffff',
  darkblue: '00008b',
  darkcyan: '008b8b',
  darkgoldenrod: 'b8860b',
  darkgray: 'a9a9a9',
  darkgreen: '006400',
  darkgrey: 'a9a9a9',
  darkkhaki: 'bdb76b',
  darkmagenta: '8b008b',
  darkolivegreen: '556b2f',
  darkorange: 'ff8c00',
  darkorchid: '9932cc',
  darkred: '8b0000',
  darksalmon: 'e9967a',
  darkseagreen: '8fbc8f',
  darkslateblue: '483d8b',
  darkslategray: '2f4f4f',
  darkslategrey: '2f4f4f',
  darkturquoise: '00ced1',
  darkviolet: '9400d3',
  deeppink: 'ff1493',
  deepskyblue: '00bfff',
  dimgray: '696969',
  dimgrey: '696969',
  dodgerblue: '1e90ff',
  firebrick: 'b22222',
  floralwhite: 'fffaf0',
  forestgreen: '228b22',
  fuchsia: 'ff00ff',
  gainsboro: 'dcdcdc',
  ghostwhite: 'f8f8ff',
  gold: 'ffd700',
  goldenrod: 'daa520',
  gray: '808080',
  green: '008000',
  greenyellow: 'adff2f',
  grey: '808080',
  honeydew: 'f0fff0',
  hotpink: 'ff69b4',
  indianred: 'cd5c5c',
  indigo: '4b0082',
  ivory: 'fffff0',
  khaki: 'f0e68c',
  lavender: 'e6e6fa',
  lavenderblush: 'fff0f5',
  lawngreen: '7cfc00',
  lemonchiffon: 'fffacd',
  lightblue: 'add8e6',
  lightcoral: 'f08080',
  lightcyan: 'e0ffff',
  lightgoldenrodyellow: 'fafad2',
  lightgray: 'd3d3d3',
  lightgreen: '90ee90',
  lightgrey: 'd3d3d3',
  lightpink: 'ffb6c1',
  lightsalmon: 'ffa07a',
  lightseagreen: '20b2aa',
  lightskyblue: '87cefa',
  lightslategray: '789',
  lightslategrey: '789',
  lightsteelblue: 'b0c4de',
  lightyellow: 'ffffe0',
  lime: '0f0',
  limegreen: '32cd32',
  linen: 'faf0e6',
  magenta: 'f0f',
  maroon: '800000',
  mediumaquamarine: '66cdaa',
  mediumblue: '0000cd',
  mediumorchid: 'ba55d3',
  mediumpurple: '9370db',
  mediumseagreen: '3cb371',
  mediumslateblue: '7b68ee',
  mediumspringgreen: '00fa9a',
  mediumturquoise: '48d1cc',
  mediumvioletred: 'c71585',
  midnightblue: '191970',
  mintcream: 'f5fffa',
  mistyrose: 'ffe4e1',
  moccasin: 'ffe4b5',
  navajowhite: 'ffdead',
  navy: '000080',
  oldlace: 'fdf5e6',
  olive: '808000',
  olivedrab: '6b8e23',
  orange: 'ffa500',
  orangered: 'ff4500',
  orchid: 'da70d6',
  palegoldenrod: 'eee8aa',
  palegreen: '98fb98',
  paleturquoise: 'afeeee',
  palevioletred: 'db7093',
  papayawhip: 'ffefd5',
  peachpuff: 'ffdab9',
  peru: 'cd853f',
  pink: 'ffc0cb',
  plum: 'dda0dd',
  powderblue: 'b0e0e6',
  purple: '800080',
  rebeccapurple: '639',
  red: 'f00',
  rosybrown: 'bc8f8f',
  royalblue: '4169e1',
  saddlebrown: '8b4513',
  salmon: 'fa8072',
  sandybrown: 'f4a460',
  seagreen: '2e8b57',
  seashell: 'fff5ee',
  sienna: 'a0522d',
  silver: 'c0c0c0',
  skyblue: '87ceeb',
  slateblue: '6a5acd',
  slategray: '708090',
  slategrey: '708090',
  snow: 'fffafa',
  springgreen: '00ff7f',
  steelblue: '4682b4',
  tan: 'd2b48c',
  teal: '008080',
  thistle: 'd8bfd8',
  tomato: 'ff6347',
  turquoise: '40e0d0',
  violet: 'ee82ee',
  wheat: 'f5deb3',
  white: 'fff',
  whitesmoke: 'f5f5f5',
  yellow: 'ff0',
  yellowgreen: '9acd32'
};
/**
 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
 * @private
 */

function nameToHex(color) {
  if (typeof color !== 'string') return color;
  var normalizedColorName = color.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
}

var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
/**
 * Returns an RgbColor or RgbaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a RgbColor or RgbaColor object back to a string.
 *
 * @example
 * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
 * const color1 = parseToRgb('rgb(255, 0, 0)');
 * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
 * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
 */

function parseToRgb(color) {
  if (typeof color !== 'string') {
    throw new PolishedError(3);
  }

  var normalizedColor = nameToHex(color);

  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }

  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha: alpha
    };
  }

  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }

  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));

    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }

  var rgbMatched = rgbRegex.exec(normalizedColor);

  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }

  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));

  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4])
    };
  }

  var hslMatched = hslRegex.exec(normalizedColor);

  if (hslMatched) {
    var hue = parseInt("" + hslMatched[1], 10);
    var saturation = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);

    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }

    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }

  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));

  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);

    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;

    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;

    var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";

    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);

    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }

    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4])
    };
  }

  throw new PolishedError(5);
}

/**
 * Reduces hex values if possible e.g. #ff8866 to #f86
 * @private
 */
var reduceHexValue = function reduceHexValue(value) {
  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
    return "#" + value[1] + value[3] + value[5];
  }

  return value;
};

function numberToHex(value) {
  var hex = value.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgb(255, 205, 100),
 *   background: rgb({ red: 255, green: 205, blue: 100 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgb(255, 205, 100)};
 *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffcd64";
 *   background: "#ffcd64";
 * }
 */
function rgb(value, green, blue) {
  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {
    return reduceHexValue("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value === 'object' && green === undefined && blue === undefined) {
    return reduceHexValue("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
  }

  throw new PolishedError(6);
}

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgba(255, 205, 100, 0.7),
 *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
 *   background: rgba(255, 205, 100, 1),
 *   background: rgba('#ffffff', 0.4),
 *   background: rgba('black', 0.7),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgba(255, 205, 100, 0.7)};
 *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
 *   background: ${rgba(255, 205, 100, 1)};
 *   background: ${rgba('#ffffff', 0.4)};
 *   background: ${rgba('black', 0.7)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,205,100,0.7)";
 *   background: "rgba(255,205,100,0.7)";
 *   background: "#ffcd64";
 *   background: "rgba(255,255,255,0.4)";
 *   background: "rgba(0,0,0,0.7)";
 * }
 */
function rgba(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === 'string' && typeof secondValue === 'number') {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {
    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {
    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }

  throw new PolishedError(7);
}

// global button group props, like the size.
// Context

var ButtonGroupContext = /*#__PURE__*/React.createContext({
  inGroup: false
}); // Context provider

var ButtonGroupProvider = function ButtonGroupProvider(props) {
  var children = props.children,
      size = props.size,
      radius = props.radius,
      _props$variation = props.variation,
      variation = _props$variation === void 0 ? 'base-fill' : _props$variation;
  var contextValue = React.useMemo(function () {
    return {
      inGroup: true,
      size: size,
      radius: radius,
      variation: variation
    };
  }, [size, radius, variation]);
  return /*#__PURE__*/React__default["default"].createElement(ButtonGroupContext.Provider, {
    value: contextValue
  }, children);
};
ButtonGroupProvider.propTypes = {
  children: T__default["default"].node,
  size: T__default["default"].string,
  radius: T__default["default"].string,
  variation: T__default["default"].string
}; // Context consumer

var useButtonGroup = function useButtonGroup() {
  // It should be possible to use the hook outside the button group to allow
  // component reusability.
  return React.useContext(ButtonGroupContext);
};

var _templateObject$1, _templateObject2$1, _templateObject3$1, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;
var createButtonStyles = function createButtonStyles(props) {
  return styled.css(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ", ";\n    user-select: none;\n    line-height: inherit;\n    border: ", " solid transparent;\n    background: transparent;\n    font-family: ", ";\n    font-weight: ", ";\n    font-style: ", ";\n    font-variation-settings: ", ";\n    text-transform: ", ";\n    outline: 0 solid transparent;\n    text-decoration: none;\n    transition: background-color 0.24s ease-in-out 0s,\n      outline-width 0.16s ease-in-out 0s;\n\n    &:focus-visible {\n      outline-width: 0.25rem;\n    }\n\n    &:focus:not(:focus-visible) {\n      outline: 0;\n    }\n\n    /* Disabled state based on prop. */\n    ", "\n\n    &[disabled] {\n      ", "\n    }\n\n    /* Size. */\n    ", "\n\n    /* Variation. */\n    ", "\n\n    /* Content Fit */\n    ", "\n\n    /* Radius */\n    &,\n    &::after {\n      ", "\n    }\n\n    &::after {\n      position: absolute;\n      z-index: 10;\n      top: -", ";\n      right: -", ";\n      bottom: -", ";\n      left: -", ";\n      content: '';\n      background: transparent;\n      pointer-events: none;\n    }\n  "])), themeProvider.glsp(0.25), themeProvider.themeVal('button.shape.border'), themeProvider.themeVal('button.type.family'), themeProvider.themeVal('button.type.weight'), themeProvider.themeVal('button.type.style'), themeProvider.themeVal('button.type.settings'), themeProvider.themeVal('button.type.case'), renderDisabledState(props), themeProvider.disabled(), renderButtonSize(props), renderButtonVariation(props), renderButtonFitting(props), renderButtonRadius(props), themeProvider.themeVal('button.shape.border'), themeProvider.themeVal('button.shape.border'), themeProvider.themeVal('button.shape.border'), themeProvider.themeVal('button.shape.border'));
}; // Styled component of a button

var StyledButton = /*#__PURE__*/styled__default["default"].button.attrs(function (props) {
  return {
    'aria-pressed': String(!!props.active),
    type: props.type || (!props.as ? 'button' : undefined)
  };
}).withConfig({
  displayName: "Button__StyledButton",
  componentId: "sc-1n019q7-0"
})(["", ""], createButtonStyles);
/* eslint-disable react/display-name, react/prop-types */
// Wrap the styled button in a high order component to pass the context
// provider. This component needs to also become a styled-component to take
// advantage of the styled component functionalities.
// To be sure that this component maintains its structure you MUST use the
// styled-component's `forwardedAs` property when replacing what's being
// rendered, instead of using `as`.

var Button = /*#__PURE__*/styled__default["default"]( /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
  var _useButtonGroup = useButtonGroup(),
      size = _useButtonGroup.size,
      variation = _useButtonGroup.variation,
      radius = _useButtonGroup.radius;

  return /*#__PURE__*/React__default["default"].createElement(StyledButton, _extends({
    size: size,
    variation: variation,
    radius: radius
  }, props, {
    ref: ref
  }));
})).withConfig({
  displayName: "Button",
  componentId: "sc-1n019q7-1"
})([""]);
/* eslint-enable */

Button.propTypes = {
  children: T__default["default"].node,
  variation: T__default["default"].string,
  size: T__default["default"].string,
  radius: T__default["default"].string,
  fitting: T__default["default"].string,
  active: T__default["default"].bool,
  disabled: T__default["default"].bool
};
/**
 * Renders the button disabled stated.
 *
 * @param {object} props The element props
 * @param {bool} props.disabled Whether the button should be disabled.
 */

function renderDisabledState(props) {
  return props.disabled ? themeProvider.disabled() : styled.css(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n        cursor: pointer;\n      "])));
}
/**
 * Renders the button size based on the props.
 *
 * @param {object} props The element props
 * @param {string} props.size The value for the box. One of
 *                 "small" | "medium" | "large" | "xlarge"
 */


function renderButtonSize(props) {
  var _props$size = props.size,
      size = _props$size === void 0 ? 'medium' : _props$size;

  switch (size) {
    case 'small':
      return styled.css(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral(["\n        min-width: 1.5rem;\n        height: 1.5rem;\n        font-size: 0.875rem;\n        padding: 0 0.5rem;\n      "])));

    case 'medium':
      return styled.css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n        min-width: 2rem;\n        height: 2rem;\n        font-size: 1rem;\n        padding: 0 0.75rem;\n      "])));

    case 'large':
      return styled.css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n        min-width: 2.5rem;\n        height: 2.5rem;\n        font-size: 1rem;\n        padding: 0 1rem;\n      "])));

    case 'xlarge':
      return styled.css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n        min-width: 3rem;\n        height: 3rem;\n        font-size: 1rem;\n        padding: 0 1.25rem;\n      "])));

    default:
      throw new Error("Invalid button size (".concat(size, "). Must be one of [small, medium, large, xlarge]."));
  }
}

function renderButtonVariation(props) {
  var _props$variation;

  var _ref = ((_props$variation = props.variation) === null || _props$variation === void 0 ? void 0 : _props$variation.split('-')) || ['base', 'text'],
      _ref2 = _slicedToArray(_ref, 2),
      color = _ref2[0],
      type = _ref2[1]; // Function to get the color from the theme.


  var tColor = function tColor(c) {
    return themeProvider.themeVal(['color', c]);
  };

  if (!['text', 'fill', 'outline'].includes(type)) {
    throw new Error("Invalid button type (".concat(type, "). Must be one of [text, fill, outline]."));
  }

  if (color === 'achromic') {
    if (type === 'fill') {
      throw new Error("achromic-fill buttons do not exist.");
    }

    switch (type) {
      case 'text':
        return styled.css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n          color: #fff;\n\n          &:hover {\n            background-color: ", ";\n          }\n\n          /* Print & when prop is passed */\n          ", "\n          &:active,\n          &.active {\n            background-color: ", ";\n          }\n\n          &:focus-visible {\n            outline-color: ", ";\n          }\n        "])), rgba('#fff', 0.04), function (_ref3) {
          var active = _ref3.active;
          return active && '&,';
        }, rgba('#fff', 0.08), rgba('#fff', 0.16));

      case 'outline':
        return styled.css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n          border-color: #fff;\n          color: #fff;\n\n          &:hover {\n            background-color: ", ";\n          }\n\n          /* Print & when prop is passed */\n          ", "\n          &:active,\n          &.active {\n            background-color: ", ";\n          }\n\n          &:focus-visible {\n            outline-color: ", ";\n          }\n        "])), rgba('#fff', 0.04), function (_ref4) {
          var active = _ref4.active;
          return active && '&,';
        }, rgba('#fff', 0.04), rgba('#fff', 0.16));
    }
  }

  switch (type) {
    case 'text':
      return styled.css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n        color: ", ";\n\n        &:hover {\n          background-color: ", ";\n        }\n\n        /* Print & when prop is passed */\n        ", "\n        &:active,\n        &.active {\n          background-color: ", ";\n        }\n\n        &:focus-visible {\n          outline-color: ", ";\n        }\n      "])), tColor(color), tColor("".concat(color, "-50a")), function (_ref5) {
        var active = _ref5.active;
        return active && '&,';
      }, tColor("".concat(color, "-100a")), tColor("".concat(color, "-200a")));

    case 'outline':
      return styled.css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n        border-color: ", ";\n        color: ", ";\n\n        &:hover {\n          background-color: ", ";\n        }\n\n        /* Print & when prop is passed */\n        ", "\n        &:active,\n        &.active {\n          background-color: ", ";\n        }\n\n        &:focus-visible {\n          outline-color: ", ";\n        }\n      "])), tColor(color), tColor(color), tColor("".concat(color, "-50a")), function (_ref6) {
        var active = _ref6.active;
        return active && '&,';
      }, tColor("".concat(color, "-100a")), tColor("".concat(color, "-200a")));

    case 'fill':
      return styled.css(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n        border-color: ", ";\n        background-color: ", ";\n        color: #fff;\n\n        &:hover {\n          background-color: ", ";\n        }\n\n        /* Print & when prop is passed */\n        ", "\n        &:active,\n        &.active {\n          background-color: ", ";\n        }\n\n        &:focus-visible {\n          outline-color: ", ";\n        }\n\n        &::after {\n          box-shadow: ", ";\n        }\n      "])), themeProvider.themeVal('color.base-200a'), tColor(color), tColor("".concat(color, "-600")), function (_ref7) {
        var active = _ref7.active;
        return active && '&,';
      }, tColor("".concat(color, "-700")), tColor("".concat(color, "-200a")), themeProvider.themeVal('boxShadow.elevationB'));
  }
}
/**
 * Renders the border radius based on the props.
 *
 * @param {object} props The element props
 * @param {string} props.radius The value for the radius. One of
 *                 "ellipsoid" | "square" | "rounded"
 */


function renderButtonRadius(props) {
  var _props$radius = props.radius,
      radius = _props$radius === void 0 ? 'rounded' : _props$radius;

  switch (radius) {
    case 'rounded':
      return styled.css(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n        border-radius: ", ";\n      "])), themeProvider.themeVal('shape.rounded'));

    case 'ellipsoid':
      return styled.css(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n        border-radius: ", ";\n      "])), themeProvider.themeVal('shape.ellipsoid'));

    case 'square':
      return styled.css(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n        border-radius: 0;\n      "])));

    default:
      throw new Error("Invalid button radius (".concat(radius, "). Must be one of [rounded, ellipsoid, square]."));
  }
}
/**
 * Renders the content fit based on the props.
 *
 * @param {object} props The element props
 * @param {string} props.fitting The value for the content fit. One of
 *                 "skinny" | "regular" | "relaxed" | "baggy"
 */


function renderButtonFitting(props) {
  var _props$fitting = props.fitting,
      fitting = _props$fitting === void 0 ? 'regular' : _props$fitting;

  switch (fitting) {
    case 'skinny':
      return styled.css(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n        padding-left: 0;\n        padding-right: 0;\n      "])));

    case 'regular':
      return '';

    case 'relaxed':
      return styled.css(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n        min-width: 12rem;\n      "])));

    case 'baggy':
      return styled.css(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n        width: 100%;\n      "])));

    default:
      throw new Error("Invalid button fitting (".concat(fitting, "). Must be one of [skinny, regular, relaxed, baggy]."));
  }
}

var _excluded = ["className", "children", "size", "variation", "radius", "role"];

var _templateObject, _templateObject2, _templateObject3;
/**
 * Renders the button group orientation based on the props.
 *
 * @param {object} props The element props
 * @param {string} props.orientation The value for the orientation. One of
 *                 "horizontal" | "vertical"
 */

function renderOrientation(props) {
  var _props$orientation = props.orientation,
      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation;

  switch (orientation) {
    case 'horizontal':
      return styled.css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        flex-flow: row nowrap;\n        > ", ":first-child:not(:last-child) {\n          &,\n          &::after {\n            border-top-right-radius: 0;\n            border-bottom-right-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(-100% 0 -100% -100%);\n          }\n        }\n        > ", ":last-child:not(:first-child) {\n          &,\n          &::after {\n            border-top-left-radius: 0;\n            border-bottom-left-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(-100% -100% -100% 0);\n          }\n        }\n        > ", ":not(:first-child):not(:last-child) {\n          &,\n          &::after {\n            border-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(-100% 0);\n          }\n        }\n        > ", " + ", " {\n          margin-left: -", ";\n        }\n      "])), Button, Button, Button, Button, Button, themeProvider.themeVal('button.shape.border'));

    case 'vertical':
      return styled.css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        flex-flow: column;\n        > ", ":first-child:not(:last-child) {\n          &,\n          &::after {\n            border-bottom-right-radius: 0;\n            border-bottom-left-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(-100% -100% 0 -100%);\n          }\n        }\n        > ", ":last-child:not(:first-child) {\n          &,\n          &::after {\n            border-top-left-radius: 0;\n            border-top-right-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(0 -100% -100% -100%);\n          }\n        }\n        > ", ":not(:first-child):not(:last-child) {\n          &,\n          &::after {\n            border-radius: 0;\n          }\n\n          &::after {\n            clip-path: inset(0 -100%);\n          }\n        }\n        > ", " + ", " {\n          margin-top: -", ";\n        }\n      "])), Button, Button, Button, Button, Button, themeProvider.themeVal('button.shape.border'));

    default:
      throw new Error("Invalid button group orientation (".concat(orientation, "). Must be one of [horizontal, vertical]."));
  }
}

var createButtonGroupStyles = function createButtonGroupStyles(props) {
  return styled.css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    position: relative;\n    display: inline-flex;\n\n    > ", " {\n      position: relative;\n      flex: 1 1 auto;\n\n      &:focus {\n        z-index: 1;\n      }\n    }\n\n    /* Group orientation */\n    ", "\n  "])), Button, renderOrientation(props));
}; // Styled component of the button group.

var StyledButtonGroup = /*#__PURE__*/styled__default["default"].div.withConfig({
  displayName: "ButtonGroup__StyledButtonGroup",
  componentId: "sc-tfq0db-0"
})(["", ""], createButtonGroupStyles);
/* eslint-disable react/display-name, react/prop-types */
// Wrap the styled button in a high order component to pass the context
// provider. This component needs to also become a styled-component to take
// advantage of the styled component functionalities.
// To be sure that this component maintains its structure you MUST use the
// styled-component's `forwardedAs` property when replacing what's being
// rendered, instead of using `as`.

var ButtonGroup = /*#__PURE__*/styled__default["default"]( /*#__PURE__*/React__default["default"].forwardRef(function (props, ref) {
  var className = props.className,
      children = props.children,
      size = props.size,
      variation = props.variation,
      radius = props.radius,
      _props$role = props.role,
      role = _props$role === void 0 ? 'group' : _props$role,
      rest = _objectWithoutProperties(props, _excluded);

  return /*#__PURE__*/React__default["default"].createElement(ButtonGroupProvider, {
    size: size,
    variation: variation,
    radius: radius
  }, /*#__PURE__*/React__default["default"].createElement(StyledButtonGroup, _extends({
    className: className,
    role: role,
    ref: ref
  }, rest), children));
})).withConfig({
  displayName: "ButtonGroup",
  componentId: "sc-tfq0db-1"
})([""]);
/* eslint-enable */

ButtonGroup.propTypes = {
  children: T__default["default"].node,
  className: T__default["default"].string,
  size: T__default["default"].string,
  variation: T__default["default"].string,
  radius: T__default["default"].string,
  role: T__default["default"].string
};

exports.Button = Button;
exports.ButtonGroup = ButtonGroup;
exports.ButtonGroupProvider = ButtonGroupProvider;
exports.createButtonGroupStyles = createButtonGroupStyles;
exports.createButtonStyles = createButtonStyles;
exports.useButtonGroup = useButtonGroup;
//# sourceMappingURL=index.cjs.js.map
