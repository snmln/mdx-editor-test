'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var styledComponents = require('styled-components');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol$1 = root.Symbol,
    splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map$1 = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map$1 || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var lodash_get = get;

var get$1 = lodash_get;

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 * @private
 */


var PolishedError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(PolishedError, _Error);

  function PolishedError(code) {
    var _this;

    {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
    }

    return _assertThisInitialized(_this);
  }

  return PolishedError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

function colorToInt(color) {
  return Math.round(color * 255);
}

function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}

function hslToRgb(hue, saturation, lightness, convert) {
  if (convert === void 0) {
    convert = convertToInt;
  }

  if (saturation === 0) {
    // achromatic
    return convert(lightness, lightness, lightness);
  } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV


  var huePrime = (hue % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;

  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }

  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert(finalRed, finalGreen, finalBlue);
}

var namedColorMap = {
  aliceblue: 'f0f8ff',
  antiquewhite: 'faebd7',
  aqua: '00ffff',
  aquamarine: '7fffd4',
  azure: 'f0ffff',
  beige: 'f5f5dc',
  bisque: 'ffe4c4',
  black: '000',
  blanchedalmond: 'ffebcd',
  blue: '0000ff',
  blueviolet: '8a2be2',
  brown: 'a52a2a',
  burlywood: 'deb887',
  cadetblue: '5f9ea0',
  chartreuse: '7fff00',
  chocolate: 'd2691e',
  coral: 'ff7f50',
  cornflowerblue: '6495ed',
  cornsilk: 'fff8dc',
  crimson: 'dc143c',
  cyan: '00ffff',
  darkblue: '00008b',
  darkcyan: '008b8b',
  darkgoldenrod: 'b8860b',
  darkgray: 'a9a9a9',
  darkgreen: '006400',
  darkgrey: 'a9a9a9',
  darkkhaki: 'bdb76b',
  darkmagenta: '8b008b',
  darkolivegreen: '556b2f',
  darkorange: 'ff8c00',
  darkorchid: '9932cc',
  darkred: '8b0000',
  darksalmon: 'e9967a',
  darkseagreen: '8fbc8f',
  darkslateblue: '483d8b',
  darkslategray: '2f4f4f',
  darkslategrey: '2f4f4f',
  darkturquoise: '00ced1',
  darkviolet: '9400d3',
  deeppink: 'ff1493',
  deepskyblue: '00bfff',
  dimgray: '696969',
  dimgrey: '696969',
  dodgerblue: '1e90ff',
  firebrick: 'b22222',
  floralwhite: 'fffaf0',
  forestgreen: '228b22',
  fuchsia: 'ff00ff',
  gainsboro: 'dcdcdc',
  ghostwhite: 'f8f8ff',
  gold: 'ffd700',
  goldenrod: 'daa520',
  gray: '808080',
  green: '008000',
  greenyellow: 'adff2f',
  grey: '808080',
  honeydew: 'f0fff0',
  hotpink: 'ff69b4',
  indianred: 'cd5c5c',
  indigo: '4b0082',
  ivory: 'fffff0',
  khaki: 'f0e68c',
  lavender: 'e6e6fa',
  lavenderblush: 'fff0f5',
  lawngreen: '7cfc00',
  lemonchiffon: 'fffacd',
  lightblue: 'add8e6',
  lightcoral: 'f08080',
  lightcyan: 'e0ffff',
  lightgoldenrodyellow: 'fafad2',
  lightgray: 'd3d3d3',
  lightgreen: '90ee90',
  lightgrey: 'd3d3d3',
  lightpink: 'ffb6c1',
  lightsalmon: 'ffa07a',
  lightseagreen: '20b2aa',
  lightskyblue: '87cefa',
  lightslategray: '789',
  lightslategrey: '789',
  lightsteelblue: 'b0c4de',
  lightyellow: 'ffffe0',
  lime: '0f0',
  limegreen: '32cd32',
  linen: 'faf0e6',
  magenta: 'f0f',
  maroon: '800000',
  mediumaquamarine: '66cdaa',
  mediumblue: '0000cd',
  mediumorchid: 'ba55d3',
  mediumpurple: '9370db',
  mediumseagreen: '3cb371',
  mediumslateblue: '7b68ee',
  mediumspringgreen: '00fa9a',
  mediumturquoise: '48d1cc',
  mediumvioletred: 'c71585',
  midnightblue: '191970',
  mintcream: 'f5fffa',
  mistyrose: 'ffe4e1',
  moccasin: 'ffe4b5',
  navajowhite: 'ffdead',
  navy: '000080',
  oldlace: 'fdf5e6',
  olive: '808000',
  olivedrab: '6b8e23',
  orange: 'ffa500',
  orangered: 'ff4500',
  orchid: 'da70d6',
  palegoldenrod: 'eee8aa',
  palegreen: '98fb98',
  paleturquoise: 'afeeee',
  palevioletred: 'db7093',
  papayawhip: 'ffefd5',
  peachpuff: 'ffdab9',
  peru: 'cd853f',
  pink: 'ffc0cb',
  plum: 'dda0dd',
  powderblue: 'b0e0e6',
  purple: '800080',
  rebeccapurple: '639',
  red: 'f00',
  rosybrown: 'bc8f8f',
  royalblue: '4169e1',
  saddlebrown: '8b4513',
  salmon: 'fa8072',
  sandybrown: 'f4a460',
  seagreen: '2e8b57',
  seashell: 'fff5ee',
  sienna: 'a0522d',
  silver: 'c0c0c0',
  skyblue: '87ceeb',
  slateblue: '6a5acd',
  slategray: '708090',
  slategrey: '708090',
  snow: 'fffafa',
  springgreen: '00ff7f',
  steelblue: '4682b4',
  tan: 'd2b48c',
  teal: '008080',
  thistle: 'd8bfd8',
  tomato: 'ff6347',
  turquoise: '40e0d0',
  violet: 'ee82ee',
  wheat: 'f5deb3',
  white: 'fff',
  whitesmoke: 'f5f5f5',
  yellow: 'ff0',
  yellowgreen: '9acd32'
};
/**
 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
 * @private
 */

function nameToHex(color) {
  if (typeof color !== 'string') return color;
  var normalizedColorName = color.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
}

var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
/**
 * Returns an RgbColor or RgbaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a RgbColor or RgbaColor object back to a string.
 *
 * @example
 * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
 * const color1 = parseToRgb('rgb(255, 0, 0)');
 * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
 * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
 */

function parseToRgb(color) {
  if (typeof color !== 'string') {
    throw new PolishedError(3);
  }

  var normalizedColor = nameToHex(color);

  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }

  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha: alpha
    };
  }

  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }

  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));

    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }

  var rgbMatched = rgbRegex.exec(normalizedColor);

  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }

  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));

  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4])
    };
  }

  var hslMatched = hslRegex.exec(normalizedColor);

  if (hslMatched) {
    var hue = parseInt("" + hslMatched[1], 10);
    var saturation = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);

    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }

    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }

  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));

  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);

    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;

    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;

    var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";

    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);

    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }

    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4])
    };
  }

  throw new PolishedError(5);
}

/**
 * Reduces hex values if possible e.g. #ff8866 to #f86
 * @private
 */
var reduceHexValue = function reduceHexValue(value) {
  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
    return "#" + value[1] + value[3] + value[5];
  }

  return value;
};

function numberToHex(value) {
  var hex = value.toString(16);
  return hex.length === 1 ? "0" + hex : hex;
}

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgb(255, 205, 100),
 *   background: rgb({ red: 255, green: 205, blue: 100 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgb(255, 205, 100)};
 *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffcd64";
 *   background: "#ffcd64";
 * }
 */
function rgb(value, green, blue) {
  if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {
    return reduceHexValue("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value === 'object' && green === undefined && blue === undefined) {
    return reduceHexValue("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
  }

  throw new PolishedError(6);
}

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgba(255, 205, 100, 0.7),
 *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
 *   background: rgba(255, 205, 100, 1),
 *   background: rgba('#ffffff', 0.4),
 *   background: rgba('black', 0.7),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgba(255, 205, 100, 0.7)};
 *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
 *   background: ${rgba(255, 205, 100, 1)};
 *   background: ${rgba('#ffffff', 0.4)};
 *   background: ${rgba('black', 0.7)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,205,100,0.7)";
 *   background: "rgba(255,205,100,0.7)";
 *   background: "#ffcd64";
 *   background: "rgba(255,255,255,0.4)";
 *   background: "rgba(0,0,0,0.7)";
 * }
 */
function rgba$1(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === 'string' && typeof secondValue === 'number') {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {
    return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {
    return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }

  throw new PolishedError(7);
}

// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-redeclare
function curried(f, length, acc) {
  return function fn() {
    // eslint-disable-next-line prefer-rest-params
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
  };
} // eslint-disable-next-line no-redeclare


function curry(f) {
  // eslint-disable-line no-redeclare
  return curried(f, f.length, []);
}

/**
 * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: mix(0.5, '#f00', '#00f')
 *   background: mix(0.25, '#f00', '#00f')
 *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${mix(0.5, '#f00', '#00f')};
 *   background: ${mix(0.25, '#f00', '#00f')};
 *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#7f007f";
 *   background: "#3f00bf";
 *   background: "rgba(63, 0, 191, 0.75)";
 * }
 */

function mix(weight, color, otherColor) {
  if (color === 'transparent') return otherColor;
  if (otherColor === 'transparent') return color;
  if (weight === 0) return otherColor;
  var parsedColor1 = parseToRgb(color);

  var color1 = _extends({}, parsedColor1, {
    alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1
  });

  var parsedColor2 = parseToRgb(otherColor);

  var color2 = _extends({}, parsedColor2, {
    alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1
  }); // The formula is copied from the original Sass implementation:
  // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method


  var alphaDelta = color1.alpha - color2.alpha;
  var x = parseFloat(weight) * 2 - 1;
  var y = x * alphaDelta === -1 ? x : x + alphaDelta;
  var z = 1 + x * alphaDelta;
  var weight1 = (y / z + 1) / 2.0;
  var weight2 = 1 - weight1;
  var mixedColor = {
    red: Math.floor(color1.red * weight1 + color2.red * weight2),
    green: Math.floor(color1.green * weight1 + color2.green * weight2),
    blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
    alpha: color1.alpha * (parseFloat(weight) / 1.0) + color2.alpha * (1 - parseFloat(weight) / 1.0)
  };
  return rgba$1(mixedColor);
} // prettier-ignore


var curriedMix = /*#__PURE__*/curry
/* ::<number | string, string, string, string> */
(mix);

/**
 * Shades a color by mixing it with black. `shade` can produce
 * hue shifts, where as `darken` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: shade(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${shade(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#00003f";
 * }
 */

function shade(percentage, color) {
  if (color === 'transparent') return color;
  return curriedMix(parseFloat(percentage), 'rgb(0, 0, 0)', color);
} // prettier-ignore


var curriedShade = /*#__PURE__*/curry
/* ::<number | string, string, string> */
(shade);

/**
 * Tints a color by mixing it with white. `tint` can produce
 * hue shifts, where as `lighten` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: tint(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${tint(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#bfbfff";
 * }
 */

function tint(percentage, color) {
  if (color === 'transparent') return color;
  return curriedMix(parseFloat(percentage), 'rgb(255, 255, 255)', color);
} // prettier-ignore


var curriedTint = /*#__PURE__*/curry
/* ::<number | string, string, string> */
(tint);

/**
 * Creates a math function that performs the given operation taking into account
 * only the unit of the first value. Eg: 2rem * 2 = 4rem | 2 * 2rem = 4
 * The resulting function accepts 2 arguments to which the given operation
 * will be applied.
 * This function is ready to work with styled-components so that any function
 * passed as an argument will receive the component props.
 *
 * @example Simple function
 * const add = createMathOperation('+');
 * add(2, 2) // -> 4
 *
 * @example Using with themeVal()
 * const multiply = createMathOperation('*');
 * multiply(themeVal('globalSpacing'), 2) // -> 2rem
 *
 * @param {string} op Math operation to perform. Can be + - * /
 */
var createMathOperation = function createMathOperation(op) {
  return function (a, b) {
    return function () {
      a = typeof a === 'function' ? a.apply(void 0, arguments) : a;
      b = typeof b === 'function' ? b.apply(void 0, arguments) : b; // The final unit is driven by the `a` value.

      var unit = (a + '').match(/[0-9]*(?:.[0-9]+)?(.*)/)[1];
      var aVal = parseFloat(a);
      var bVal = parseFloat(b);

      if (op === '+') {
        return "".concat(aVal + bVal).concat(unit);
      } else if (op === '-') {
        return "".concat(aVal - bVal).concat(unit);
      } else if (op === '/') {
        return "".concat(aVal / bVal).concat(unit);
      } else if (op === '*') {
        return "".concat(aVal * bVal).concat(unit);
      }
    };
  };
};
/**
 * Creates a math function to add values. It takes into account
 * only the unit of the first value. Eg: 2rem + 2 = 4rem | 2 + 2rem = 4
 * This function is ready to work with styled-components so that any function
 * passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */


var add = createMathOperation('+');
/**
 * Creates a math function to subtract values. It takes into account
 * only the unit of the first value. Eg: 4rem - 2 = 2rem | 4 - 2rem = 2
 * This function is ready to work with styled-components so that any function
 * passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */

var subtract = createMathOperation('-');
/**
 * Creates a math function to divide values. It takes into account
 * only the unit of the first value. Eg: 4rem / 2 = 2rem | 4 / 2rem = 2
 * This function is ready to work with styled-components so that any function
 * passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */

var divide = createMathOperation('/');
/**
 * Creates a math function to multiply values. It takes into account
 * only the unit of the first value. Eg: 2rem * 2 = 4rem | 2 * 2rem = 4
 * This function is ready to work with styled-components so that any function
 * passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */

var multiply = createMathOperation('*');

var createMinMaxOp = function createMinMaxOp(op) {
  return function (a, b) {
    return function () {
      a = typeof a === 'function' ? a.apply(void 0, arguments) : a;
      b = typeof b === 'function' ? b.apply(void 0, arguments) : b;
      var unitRx = /[0-9]*(?:.[0-9]+)?(.*)/;
      var aUnit = (a + '').match(unitRx)[1];
      var bUnit = (b + '').match(unitRx)[1];
      var aVal = parseFloat(a);
      var bVal = parseFloat(b); // If the values are different but set, return no unit, otherwise return the
      // unit of the value that has it. this is useful when comparing for example
      // 10px with 16.

      var unit = '';

      if (aUnit === bUnit) {
        unit = aUnit;
      } else if (aUnit && !bUnit) {
        unit = aUnit;
      } else if (!aUnit && bUnit) {
        unit = bUnit;
      }

      if (op === 'min') {
        return "".concat(Math.min(aVal, bVal)).concat(unit);
      } else if (op === 'max') {
        return "".concat(Math.max(aVal, bVal)).concat(unit);
      }
    };
  };
};
/**
 * Creates a math function that returns the minimum of two values. Units are
 * discarded when doing the comparison, but the value is returned with a unit
 * if both arguments has the same one or if only one has it.
 * Eg: 10px, 3px => 3px
 * Eg: 10px, 3 => 3px
 * Eg: 1rem, 3px => 1
 *
 * This function is ready to work with styled-components
 * so that any function passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */


var min = createMinMaxOp('min');
/**
 * Creates a math function that returns the maximum of two values. Units are
 * discarded when doing the comparison, but the value is returned with a unit
 * if both arguments has the same one or if only one has it.
 * Eg: 10px, 3px => 10px
 * Eg: 10px, 3 => 10px
 * Eg: 1rem, 3px => 3
 *
 * This function is ready to work with styled-components
 * so that any function passed as an argument will receive the component props.
 *
 * @param {string} a First value
 * @param {string} b Second value
 */

var max = createMinMaxOp('max');

/**
 * Return a function that when executed appends the `unit` to the value.
 *
 * @example
 * const percent = unitify('%');
 * percent(10) // -> 10%
 *
 * @param {string} unit The unit to use
 */

var unitify = function unitify(unit) {
  return function (v) {
    return typeof v === 'function' ? function () {
      return "".concat(v.apply(void 0, arguments)).concat(unit);
    } : "".concat(v).concat(unit);
  };
};
/**
 * Return the given value with `rem` appended.
 * If value is a function will execute it. This allows to use directly in
 * styled-components with themeVal
 *
 * @see themeVal()
 *
 * @example
 * rem(themeVal('shape.rounded'))
 *
 * @param {mixed} val The value
 */

var rem = unitify('rem');
/**
 * Return the given value with `px` appended.
 * If value is a function will execute it. This allows to use directly in
 * styled-components with themeVal
 *
 * @see themeVal()
 *
 * @example
 * px(themeVal('shape.rounded'))
 *
 * @param {mixed} val The value
 */

var px = unitify('px');
/**
 * Convert the given value to the given unit using the base size defined in the
 * theme. (theme.type.base.root) If value is a function will execute it. This
 * allows to use directly in styled-components with themeVal.
 * Only conversion between rem and px is allowed. Any other destination unit
 * will be ignored and the value returned as is.
 *
 * @example
 * rp2rp(themeVal('layout.max'), 'px')
 *
 * @param {mixed} v The value
 * @param {mixed} unit The destination unit
 *
 * @throws Error if the root type pixel value is not defined.
 */

var rp2rp = function rp2rp(v, unit) {
  return function () {
    v = typeof v === 'function' ? v.apply(void 0, arguments) : v;
    unit = typeof unit === 'function' ? unit.apply(void 0, arguments) : unit;
    var rootV = get$1(arguments.length <= 0 ? undefined : arguments[0], 'theme.type.base.root', null);

    if (rootV === null) {
      throw new Error('Root type pixel value not found in theme.type.base.root');
    }

    var srcUnit = (v + '').match(/[0-9]*(?:.[0-9]+)?(.*)/)[1];
    var srcVal = parseFloat(v);

    if (unit === 'px') {
      return px(srcUnit === 'rem' ? srcVal * parseFloat(rootV) : srcVal);
    }

    if (unit === 'rem') {
      return rem(srcUnit === 'px' ? srcVal / parseFloat(rootV) : srcVal);
    } // Invalid unit - return as is.


    return v;
  };
};
/**
 * Convert the given value to pixels using the base size defined in the theme.
 * (theme.type.base.root)
 * If value is a function will execute it. This allows to use directly in
 * styled-components with themeVal
 *
 * @see rp2rp()
 *
 * @example
 * val2px(themeVal('layout.max'))
 *
 * @param {mixed} val The value
 *
 * @throws Error if the root type pixel value is not defined.
 */


var val2px = function val2px(val) {
  return rp2rp(val, 'px');
};
/**
 * Convert the given value to rem using the base size defined in the theme.
 * (theme.type.base.root)
 * If value is a function will execute it. This allows to use directly in
 * styled-components with themeVal
 *
 * @see rp2rp()
 *
 * @example
 * val2rem(themeVal('layout.max'))
 *
 * @param {mixed} val The value
 *
 * @throws Error if the root type pixel value is not defined.
 */

var val2rem = function val2rem(val) {
  return rp2rp(val, 'rem');
};
/**
 * Returns a function to be used with styled-components and gets a value from
 * the theme property.
 *
 * @param {string} path The path to get from theme
 */

var themeVal = function themeVal(path) {
  return function (_ref) {
    var theme = _ref.theme;
    var v = get$1(theme, path, undefined);

    if (v === undefined) {
      console.error( // eslint-disable-line
      "Theme Value Error: path [".concat(path, "] not found in theme."), theme);
    }

    return v;
  };
};
/**
 * Allows a function to be used with style-components interpolation, passing the
 * component props to each one of the functions arguments if those arguments are
 * functions.
 *
 * Useful in conjunction with themeVal. Instead of:
 * ${(props) => rgba(props.theme.colors.primaryColor, 0.16)}
 * you can do
 * ${rgbaFn(themeVal('colors.primaryColor'), 0.16)}
 *
 * @param {function} fn The function to wrap.
 *
 * @returns {function} Curried function
 */

var stylizeFunction = function stylizeFunction(fn) {
  return function () {
    for (var _len = arguments.length, fnArgs = new Array(_len), _key = 0; _key < _len; _key++) {
      fnArgs[_key] = arguments[_key];
    }

    return function () {
      for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        props[_key2] = arguments[_key2];
      }

      var mappedArgs = fnArgs.map(function (arg) {
        return typeof arg === 'function' ? arg.apply(void 0, props) : arg;
      });
      return fn.apply(void 0, _toConsumableArray(mappedArgs));
    };
  };
};
/**
 * Returns the layout.space value form the theme multiplied by the
 * given multiplier.
 *
 * @param {number} m multiplier
 */

var glsp = function glsp() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  args = args.length ? args : [1];
  var fns = args.map(function (m) {
    return multiply(themeVal('layout.space'), m);
  }); // If the there's only one argument return in value format to be used by
  // other methods that need this to resolve to a number.

  if (fns.length === 1) return fns[0];
  var spaces = Array(args.length - 1).fill(' ');
  return styledComponents.css.apply(void 0, [[''].concat(_toConsumableArray(spaces), [''])].concat(_toConsumableArray(fns)));
};
/**
 * Polished rgba function but stylized.
 */

var rgba = stylizeFunction(rgba$1);

/**
 * Curry the polished rgba function to allow switching the parameters.
 */

var _rgba = function _rgba(alpha) {
  return function (color) {
    return rgba$1(color, alpha);
  };
};

var colorPaletteSettings = [{
  code: '50',
  colorFn: curriedTint(0.96)
}, {
  code: '50a',
  colorFn: _rgba(0.04)
}, {
  code: '100',
  colorFn: curriedTint(0.92)
}, {
  code: '100a',
  colorFn: _rgba(0.08)
}, {
  code: '200',
  colorFn: curriedTint(0.84)
}, {
  code: '200a',
  colorFn: _rgba(0.16)
}, {
  code: '300',
  colorFn: curriedTint(0.68)
}, {
  code: '300a',
  colorFn: _rgba(0.32)
}, {
  code: '400',
  colorFn: curriedTint(0.36)
}, {
  code: '400a',
  colorFn: _rgba(0.64)
}, {
  code: '500',
  colorFn: function colorFn(v) {
    return v;
  }
}, {
  code: '600',
  colorFn: curriedShade(0.16)
}, {
  code: '700',
  colorFn: curriedShade(0.32)
}, {
  code: '800',
  colorFn: curriedShade(0.48)
}, {
  code: '900',
  colorFn: curriedShade(0.64)
}];
/**
 * Creates a color palette base off of the provided base color including
 * lightened/darkened/transparent versions of that color.
 *
 * Uses a scale from 50 - 900 to indicate the color value. Values lower than 500
 * are lightened, above 500 are darkened and values ending with `a` have a alpha
 * channel.
 *
 * List of returned colors:
 * name-50      Lightened 96%
 * name-50a     Opacity 4%
 * name-100     Lightened 92%
 * name-100a    Opacity 8%
 * name-200     Lightened 84%
 * name-200a    Opacity 16%
 * name-300     Lightened 68%
 * name-300a    Opacity 32%
 * name-400     Lightened 36%
 * name-400a    Opacity 64%
 * name-500     Same as base color
 * name-600     Darkened 16%
 * name-700     Darkened 32%
 * name-800     Darkened 48%
 * name-900     Darkened 64%
 *
 * @param {string} name Name of the color variable
 * @param {string} baseColor Base color for the palette. Used as middle color
 * with value 500.
 *
 * @returns object
 */

function createColorPalette(name, baseColor) {
  return colorPaletteSettings.reduce(function (acc, c) {
    return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, "".concat(name, "-").concat(c.code), c.colorFn(baseColor)));
  }, {});
}

var _excluded$1 = ["color", "type", "shape", "layout", "button", "boxShadow", "mediaRanges"],
    _excluded2 = ["surface", "base", "primary", "secondary", "danger", "warning", "success", "info", "background", "link"],
    _excluded3 = ["base", "heading", "overline"],
    _excluded4 = ["size", "line", "color", "family", "style", "settings", "case", "light", "regular", "medium", "bold", "weight", "antialiasing"],
    _excluded5 = ["family", "style", "settings", "case", "light", "regular", "medium", "bold", "weight", "textTransform"],
    _excluded6 = ["family", "style", "settings", "case", "light", "regular", "medium", "bold", "weight", "textTransform"],
    _excluded7 = ["rounded", "ellipsoid"],
    _excluded8 = ["space", "border", "min", "max"],
    _excluded9 = ["type", "shape"],
    _excluded10 = ["family", "style", "settings", "case", "weight"],
    _excluded11 = ["border", "rounded"],
    _excluded12 = ["inset", "input", "elevationA", "elevationB", "elevationC", "elevationD"];
/**
 * Creates a UI theme by combining the provided options with the default ones.
 * When an override for a value is provided, it gets propagated to all the
 * variables that use that value. For example: The primary color will be used
 * for links unless a color for "link" is provided.
 *
 * @param {DevseedUITheme} definition The theme definition
 *
 * @returns DevseedUITheme
 */

function createUITheme() {
  var definition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _definition$color = definition.color,
      color = _definition$color === void 0 ? {} : _definition$color,
      _definition$type = definition.type,
      type = _definition$type === void 0 ? {} : _definition$type,
      _definition$shape = definition.shape,
      shape = _definition$shape === void 0 ? {} : _definition$shape,
      _definition$layout = definition.layout,
      layout = _definition$layout === void 0 ? {} : _definition$layout,
      _definition$button = definition.button,
      button = _definition$button === void 0 ? {} : _definition$button,
      _definition$boxShadow = definition.boxShadow,
      boxShadow = _definition$boxShadow === void 0 ? {} : _definition$boxShadow,
      _definition$mediaRang = definition.mediaRanges,
      mediaRanges = _definition$mediaRang === void 0 ? {} : _definition$mediaRang,
      customDefinition = _objectWithoutProperties(definition, _excluded$1);

  var _color$surface = color.surface,
      surface = _color$surface === void 0 ? '#FFFFFF' : _color$surface,
      _color$base = color.base,
      base = _color$base === void 0 ? '#443F3F' : _color$base,
      _color$primary = color.primary,
      primary = _color$primary === void 0 ? '#CF3F02' : _color$primary,
      _color$secondary = color.secondary,
      secondary = _color$secondary === void 0 ? '#E2C044' : _color$secondary,
      _color$danger = color.danger,
      danger = _color$danger === void 0 ? '#A71D31' : _color$danger,
      _color$warning = color.warning,
      warning = _color$warning === void 0 ? '#E2C044' : _color$warning,
      _color$success = color.success,
      success = _color$success === void 0 ? '#4DA167' : _color$success,
      _color$info = color.info,
      info = _color$info === void 0 ? '#2E86AB' : _color$info,
      background = color.background,
      link = color.link,
      customColors = _objectWithoutProperties(color, _excluded2);

  var colorScales = _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({}, createColorPalette('base', base)), createColorPalette('surface', surface)), createColorPalette('primary', primary)), createColorPalette('secondary', secondary)), createColorPalette('danger', danger)), createColorPalette('warning', warning)), createColorPalette('success', success)), createColorPalette('info', info));

  var _type$base = type.base,
      typeBase = _type$base === void 0 ? {} : _type$base,
      _type$heading = type.heading,
      typeHeading = _type$heading === void 0 ? {} : _type$heading,
      _type$overline = type.overline,
      typeOverline = _type$overline === void 0 ? {} : _type$overline,
      customType = _objectWithoutProperties(type, _excluded3);

  var _typeBase$size = typeBase.size,
      typeBaseSize = _typeBase$size === void 0 ? '1rem' : _typeBase$size,
      _typeBase$line = typeBase.line,
      typeBaseLine = _typeBase$line === void 0 ? 'calc(0.5rem + 1em)' : _typeBase$line,
      _typeBase$color = typeBase.color,
      typeBaseColor = _typeBase$color === void 0 ? base : _typeBase$color,
      _typeBase$family = typeBase.family,
      typeBaseFamily = _typeBase$family === void 0 ? '"Open Sans", sans-serif' : _typeBase$family,
      _typeBase$style = typeBase.style,
      typeBaseStyle = _typeBase$style === void 0 ? 'normal' : _typeBase$style,
      _typeBase$settings = typeBase.settings,
      typeBaseSettings = _typeBase$settings === void 0 ? "'pnum' 0" : _typeBase$settings,
      _typeBase$case = typeBase.case,
      typeBaseCase = _typeBase$case === void 0 ? 'none' : _typeBase$case,
      _typeBase$light = typeBase.light,
      typeBaseLight = _typeBase$light === void 0 ? 300 : _typeBase$light,
      _typeBase$regular = typeBase.regular,
      typeBaseRegular = _typeBase$regular === void 0 ? 400 : _typeBase$regular,
      _typeBase$medium = typeBase.medium,
      typeBaseMedium = _typeBase$medium === void 0 ? 600 : _typeBase$medium,
      _typeBase$bold = typeBase.bold,
      typeBaseBold = _typeBase$bold === void 0 ? 700 : _typeBase$bold,
      _typeBase$weight = typeBase.weight,
      typeBaseWeight = _typeBase$weight === void 0 ? 300 : _typeBase$weight,
      _typeBase$antialiasin = typeBase.antialiasing,
      typeBaseAntialiasing = _typeBase$antialiasin === void 0 ? true : _typeBase$antialiasin,
      customTypeBase = _objectWithoutProperties(typeBase, _excluded4);

  var _typeBase$leadSize = typeBase.leadSize,
      typeLeadSize = _typeBase$leadSize === void 0 ? "calc(".concat(typeBaseSize, " * 1.5)") : _typeBase$leadSize;

  var _typeHeading$family = typeHeading.family,
      typeHeadingFamily = _typeHeading$family === void 0 ? typeBaseFamily : _typeHeading$family,
      _typeHeading$style = typeHeading.style,
      typeHeadingStyle = _typeHeading$style === void 0 ? typeBaseStyle : _typeHeading$style,
      _typeHeading$settings = typeHeading.settings,
      typeHeadingSettings = _typeHeading$settings === void 0 ? '"wdth" 80, "wght" 780' : _typeHeading$settings,
      _typeHeading$case = typeHeading.case,
      typeHeadingCase = _typeHeading$case === void 0 ? typeBaseCase : _typeHeading$case,
      _typeHeading$light = typeHeading.light,
      typeHeadingLight = _typeHeading$light === void 0 ? typeBaseLight : _typeHeading$light,
      _typeHeading$regular = typeHeading.regular,
      typeHeadingRegular = _typeHeading$regular === void 0 ? typeBaseRegular : _typeHeading$regular,
      _typeHeading$medium = typeHeading.medium,
      typeHeadingMedium = _typeHeading$medium === void 0 ? typeBaseMedium : _typeHeading$medium,
      _typeHeading$bold = typeHeading.bold,
      typeHeadingBold = _typeHeading$bold === void 0 ? typeBaseBold : _typeHeading$bold,
      _typeHeading$weight = typeHeading.weight,
      typeHeadingWeight = _typeHeading$weight === void 0 ? typeBaseBold : _typeHeading$weight,
      _typeHeading$textTran = typeHeading.textTransform,
      typeHeadingTextTransform = _typeHeading$textTran === void 0 ? 'none' : _typeHeading$textTran,
      customTypeHeading = _objectWithoutProperties(typeHeading, _excluded5);

  var _typeOverline$family = typeOverline.family,
      typeOverlineFamily = _typeOverline$family === void 0 ? typeBaseFamily : _typeOverline$family,
      _typeOverline$style = typeOverline.style,
      typeOverlineStyle = _typeOverline$style === void 0 ? typeBaseStyle : _typeOverline$style,
      _typeOverline$setting = typeOverline.settings,
      typeOverlineSettings = _typeOverline$setting === void 0 ? typeBaseSettings : _typeOverline$setting,
      _typeOverline$case = typeOverline.case,
      typeOverlineCase = _typeOverline$case === void 0 ? typeBaseCase : _typeOverline$case,
      _typeOverline$light = typeOverline.light,
      typeOverlineLight = _typeOverline$light === void 0 ? typeBaseLight : _typeOverline$light,
      _typeOverline$regular = typeOverline.regular,
      typeOverlineRegular = _typeOverline$regular === void 0 ? typeBaseRegular : _typeOverline$regular,
      _typeOverline$medium = typeOverline.medium,
      typeOverlineMedium = _typeOverline$medium === void 0 ? typeBaseMedium : _typeOverline$medium,
      _typeOverline$bold = typeOverline.bold,
      typeOverlineBold = _typeOverline$bold === void 0 ? typeBaseBold : _typeOverline$bold,
      _typeOverline$weight = typeOverline.weight,
      typeOverlineWeight = _typeOverline$weight === void 0 ? typeBaseBold : _typeOverline$weight,
      _typeOverline$textTra = typeOverline.textTransform,
      typeOverlineTextTransform = _typeOverline$textTra === void 0 ? 'uppercase' : _typeOverline$textTra,
      customTypeOverline = _objectWithoutProperties(typeOverline, _excluded6);

  var _shape$rounded = shape.rounded,
      rounded = _shape$rounded === void 0 ? '0.25rem' : _shape$rounded,
      _shape$ellipsoid = shape.ellipsoid,
      ellipsoid = _shape$ellipsoid === void 0 ? '320rem' : _shape$ellipsoid,
      customShape = _objectWithoutProperties(shape, _excluded7);

  var _layout$space = layout.space,
      space = _layout$space === void 0 ? '1rem' : _layout$space,
      _layout$border = layout.border,
      border = _layout$border === void 0 ? '1px' : _layout$border,
      _layout$min = layout.min,
      min = _layout$min === void 0 ? '320px' : _layout$min,
      _layout$max = layout.max,
      max = _layout$max === void 0 ? '1280px' : _layout$max,
      customLayout = _objectWithoutProperties(layout, _excluded8);

  var _button$type = button.type,
      buttonType = _button$type === void 0 ? {} : _button$type,
      _button$shape = button.shape,
      buttonShape = _button$shape === void 0 ? {} : _button$shape,
      customButton = _objectWithoutProperties(button, _excluded9);

  var _buttonType$family = buttonType.family,
      buttonTypeFamily = _buttonType$family === void 0 ? typeBaseFamily : _buttonType$family,
      _buttonType$style = buttonType.style,
      buttonTypeStyle = _buttonType$style === void 0 ? typeBaseStyle : _buttonType$style,
      _buttonType$settings = buttonType.settings,
      buttonTypeSettings = _buttonType$settings === void 0 ? typeBaseSettings : _buttonType$settings,
      _buttonType$case = buttonType.case,
      buttonTypeCase = _buttonType$case === void 0 ? typeBaseCase : _buttonType$case,
      _buttonType$weight = buttonType.weight,
      buttonTypeWeight = _buttonType$weight === void 0 ? typeBaseBold : _buttonType$weight,
      customButtonType = _objectWithoutProperties(buttonType, _excluded10);

  var _buttonShape$border = buttonShape.border,
      buttonShapeBorder = _buttonShape$border === void 0 ? border : _buttonShape$border,
      _buttonShape$rounded = buttonShape.rounded,
      buttonShapeRounded = _buttonShape$rounded === void 0 ? rounded : _buttonShape$rounded,
      customButtonShape = _objectWithoutProperties(buttonShape, _excluded11);

  var _boxShadow$inset = boxShadow.inset,
      inset = _boxShadow$inset === void 0 ? "inset 0px 0px 3px 0px ".concat(colorScales['base-50a'], ";") : _boxShadow$inset,
      _boxShadow$input = boxShadow.input,
      input = _boxShadow$input === void 0 ? "0 -1px 1px 0 ".concat(colorScales['base-100a'], ", 0 2px 6px 0 ").concat(colorScales['base-200a'], ";") : _boxShadow$input,
      _boxShadow$elevationA = boxShadow.elevationA,
      elevationA = _boxShadow$elevationA === void 0 ? "0 0 4px 0 ".concat(colorScales['base-100a'], ", 0 2px 2px 0 ").concat(colorScales['base-100a'], ";") : _boxShadow$elevationA,
      _boxShadow$elevationB = boxShadow.elevationB,
      elevationB = _boxShadow$elevationB === void 0 ? "0 0 4px 0 ".concat(colorScales['base-100a'], ", 0 4px 4px 0 ").concat(colorScales['base-100a'], ";") : _boxShadow$elevationB,
      _boxShadow$elevationC = boxShadow.elevationC,
      elevationC = _boxShadow$elevationC === void 0 ? "0 0 4px 0 ".concat(colorScales['base-100a'], ", 0 8px 12px 0 ").concat(colorScales['base-100a'], ";") : _boxShadow$elevationC,
      _boxShadow$elevationD = boxShadow.elevationD,
      elevationD = _boxShadow$elevationD === void 0 ? "0 0 4px 0 ".concat(colorScales['base-100a'], ", 0 12px 24px 0 ").concat(colorScales['base-100a'], ";") : _boxShadow$elevationD,
      customBoxShadow = _objectWithoutProperties(boxShadow, _excluded12);

  var _mediaRanges$xsmall = mediaRanges.xsmall,
      xsmall = _mediaRanges$xsmall === void 0 ? [null, 543] : _mediaRanges$xsmall,
      _mediaRanges$small = mediaRanges.small,
      small = _mediaRanges$small === void 0 ? [544, 767] : _mediaRanges$small,
      _mediaRanges$medium = mediaRanges.medium,
      medium = _mediaRanges$medium === void 0 ? [768, 991] : _mediaRanges$medium,
      _mediaRanges$large = mediaRanges.large,
      large = _mediaRanges$large === void 0 ? [992, 1215] : _mediaRanges$large,
      _mediaRanges$xlarge = mediaRanges.xlarge,
      xlarge = _mediaRanges$xlarge === void 0 ? [1216, null] : _mediaRanges$xlarge; //
  // Theme object definition

  return _objectSpread2(_objectSpread2({}, customDefinition), {}, {
    color: _objectSpread2(_objectSpread2({
      // base color for the site. Text and all elements that are not colored.
      // required
      base: base,
      // Background color for filled elements that sit on top of the body.
      // (cards, panel, modal...)
      // required
      surface: surface,
      // required
      primary: primary,
      // required
      secondary: secondary,
      // States colors
      // required
      danger: danger,
      // required
      warning: warning,
      // required
      success: success,
      // required
      info: info,
      // Only used for body color. Uses surface if not provided.
      background: background || surface,
      // Color for links. Uses primary if not defined
      link: link || primary
    }, customColors), colorScales),
    type: _objectSpread2({
      base: _objectSpread2({
        size: typeBaseSize,
        leadSize: typeLeadSize,
        line: typeBaseLine,
        color: typeBaseColor,
        family: typeBaseFamily,
        style: typeBaseStyle,
        settings: typeBaseSettings,
        case: typeBaseCase,
        light: typeBaseLight,
        regular: typeBaseRegular,
        medium: typeBaseMedium,
        bold: typeBaseBold,
        weight: typeBaseWeight,
        antialiasing: typeBaseAntialiasing
      }, customTypeBase),
      heading: _objectSpread2({
        family: typeHeadingFamily,
        style: typeHeadingStyle,
        settings: typeHeadingSettings,
        case: typeHeadingCase,
        light: typeHeadingLight,
        regular: typeHeadingRegular,
        medium: typeHeadingMedium,
        bold: typeHeadingBold,
        weight: typeHeadingWeight,
        textTransform: typeHeadingTextTransform
      }, customTypeHeading),
      overline: _objectSpread2({
        family: typeOverlineFamily,
        style: typeOverlineStyle,
        settings: typeOverlineSettings,
        case: typeOverlineCase,
        light: typeOverlineLight,
        regular: typeOverlineRegular,
        medium: typeOverlineMedium,
        bold: typeOverlineBold,
        weight: typeOverlineWeight,
        textTransform: typeOverlineTextTransform
      }, customTypeOverline)
    }, customType),
    shape: _objectSpread2({
      rounded: rounded,
      ellipsoid: ellipsoid
    }, customShape),
    layout: _objectSpread2({
      space: space,
      border: border,
      min: min,
      max: max
    }, customLayout),
    button: _objectSpread2({
      type: _objectSpread2({
        family: buttonTypeFamily,
        style: buttonTypeStyle,
        settings: buttonTypeSettings,
        case: buttonTypeCase,
        weight: buttonTypeWeight
      }, customButtonType),
      shape: _objectSpread2({
        border: buttonShapeBorder,
        rounded: buttonShapeRounded
      }, customButtonShape)
    }, customButton),
    boxShadow: _objectSpread2({
      inset: inset,
      input: input,
      elevationA: elevationA,
      elevationB: elevationB,
      elevationC: elevationC,
      elevationD: elevationD
    }, customBoxShadow),
    mediaRanges: {
      xsmall: xsmall,
      small: small,
      medium: medium,
      large: large,
      xlarge: xlarge
    }
  });
}
var theme = {
  main: createUITheme()
};

var _templateObject$2, _templateObject2$1, _templateObject3$1, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
var antialiased = function antialiased() {
  return styledComponents.css(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteral(["\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n"])));
}; // Hide only visually, but have it available for screen readers.

var visuallyHidden = function visuallyHidden() {
  return styledComponents.css(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteral(["\n  border: 0 none;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n"])));
};
var listReset = function listReset() {
  return styledComponents.css(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: 0;\n  list-style: none;\n"])));
};
var truncated = function truncated() {
  return styledComponents.css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
};
var visuallyDisabled = function visuallyDisabled() {
  return styledComponents.css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  opacity: 0.48;\n  cursor: not-allowed;\n"])));
};
var disabled = function disabled() {
  return styledComponents.css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  opacity: 0.48;\n  pointer-events: none;\n"])));
};
var unscrollableY = function unscrollableY() {
  return styledComponents.css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  overflow-y: hidden;\n"])));
};
var unscrollableX = function unscrollableX() {
  return styledComponents.css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  overflow-x: hidden;\n"])));
};

var _excluded = ["children", "theme"];

var _templateObject$1, _templateObject2, _templateObject3;
// This way they're only rendered when absolutely needed.

var baseStyles = styledComponents.css(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteral(["\n  /**\n   * Based on\n   * https://hankchizljaw.com/wrote/a-modern-css-reset/\n   */\n\n  /* Box sizing rules */\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  }\n\n  /* Set default line-height */\n  * {\n    line-height: ", ";\n  }\n\n  /* Remove default margin */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6,\n  p,\n  ul,\n  ol,\n  li,\n  figure,\n  blockquote,\n  dl,\n  dd {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests\n  default styling will be removed */\n  ul[role='list'],\n  ol[role='list'] {\n    list-style: none;\n    padding: 0;\n  }\n\n  /* Set core <body> defaults */\n  body {\n    background-color: ", ";\n    color: ", ";\n    font-size: ", ";\n    /* stylelint-disable-next-line font-family-no-missing-generic-family-keyword */\n    font-family: ", ";\n    text-transform: ", ";\n    font-weight: ", ";\n    font-style: ", ";\n    font-variation-settings: ", ";\n    min-width: ", ";\n    min-height: 100vh;\n    text-rendering: optimizeSpeed;\n\n    ", "\n  }\n\n  /* Apply some default styles to <a> elements without a class */\n  a:not([class]) {\n    cursor: pointer;\n    color: ", ";\n    text-decoration: none;\n    transition: opacity 0.24s ease 0s;\n\n    &:visited {\n      color: ", ";\n    }\n\n    &:hover {\n      opacity: 0.64;\n    }\n\n    &:active {\n      transform: translate(0, 1px);\n    }\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for <input> and <button> */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Text-level semantics */\n  b,\n  strong {\n    font-weight: ", ";\n  }\n\n  /* Remove all animations and transitions for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n\n  /* Misc */\n  ::selection {\n    background-color: ", ";\n    color: ", ";\n  }\n\n  .tether-element {\n    z-index: 1000;\n  }\n\n  .unscrollable-y {\n    ", "\n  }\n\n  .unscrollable-x {\n    ", "\n  }\n"])), themeVal('type.base.line'), themeVal('color.background'), themeVal('type.base.color'), themeVal('type.base.size'), themeVal('type.base.family'), themeVal('type.base.case'), themeVal('type.base.weight'), themeVal('type.base.style'), themeVal('type.base.settings'), themeVal('layout.min'), function (_ref) {
  var theme = _ref.theme;
  return theme.type.base.antialiasing && styledComponents.css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n      "])));
}, themeVal('color.link'), themeVal('color.link'), themeVal('type.base.bold'), themeVal('color.base-400a'), themeVal('color.surface'), unscrollableY(), unscrollableX());
var GlobalStyles = styledComponents.createGlobalStyle(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  ", "\n"])), baseStyles);
/* eslint-disable react/prop-types */

var DevseedUiThemeProvider = function DevseedUiThemeProvider(_ref2) {
  var children = _ref2.children,
      providedTheme = _ref2.theme,
      rest = _objectWithoutProperties(_ref2, _excluded);

  // If the user provided a function, pass the ui library theme to allow
  // overrides. The resulting theme will be the used one.
  var newTheme = typeof providedTheme === 'function' ? providedTheme(theme.main) : // If it's not a function, the provided theme is used,
  // defaulting to the ui-library.
  providedTheme || theme.main;
  return /*#__PURE__*/React__default["default"].createElement(styledComponents.ThemeProvider, _extends$1({
    theme: newTheme
  }, rest), /*#__PURE__*/React__default["default"].createElement(GlobalStyles, null), children);
};

var _templateObject;
var availableRanges = ['xsmall', 'small', 'medium', 'large', 'xlarge'];
var availableBounds = ['Up', 'Only', 'Down'];
/**
 * Create the 'Up', 'Only', and 'Down' options for the given media label.
 * Logs a warning to the console when the use media query makes no sense,
 * switching to the best alternative possible.
 *
 * @param {string} label Media query range label
 */

/**
 * Create the css media query expression, validating the input range and the
 * desired media query bound type (Up, Down, Only)
 * Logs a warning to the console when the use media query makes no sense,
 * switching to the best alternative possible.
 *
 * @param {array} range The media query range [upper, lower] bounds.
 * @param {string} label The media query range label
 * @param {string} type The media query bound type. One of (Up, Down, Only).
 */

function buildMediaExp(range, label, type) {
  var getExpr = function getExpr(_ref, type) {
    var _ref2 = _slicedToArray(_ref, 2),
        lower = _ref2[0],
        upper = _ref2[1];

    switch (type) {
      case 'Up':
        // It makes no sense to have a media query "Up" from nothing.
        // There's no need for a media query in that case.
        if (lower === null) return null;
        return "only screen and (min-width: ".concat(lower, "px)");

      case 'Only':
        // This only makes sense when there are both bounds.
        // Otherwise the "Up" or "Down" can be used with the same result.
        if (lower === null || upper === null) return null;
        return "only screen and (min-width: ".concat(lower, "px and max-width: ").concat(upper, "px)");

      case 'Down':
        // It makes no sense to have a media query "Down" from infinity.
        // There's no need for a media query in that case.
        if (upper === null) return null;
        return "only screen and (max-width: ".concat(upper, "px)");
    }
  };

  var missingRange = range[0] === null ? 'lower' : range[1] === null ? 'upper' : null;
  var expr = getExpr(range, type);

  if (expr === null && (type === 'Up' || type === 'Down')) {
    // eslint-disable-next-line
    console.warn("Media query warning: The specified media query (".concat(label).concat(type, ") has no ").concat(missingRange, " bound.\nThere's no need for a media query in this case;"));
    return null;
  } else if (expr === null) {
    // eslint-disable-next-line
    console.warn("Media query warning: The specified media query (".concat(label).concat(type, ") has no ").concat(missingRange, " bound.\nYou can use (").concat(label).concat(range[0] === null ? 'Down' : 'Up', ") instead."));
    return getExpr(range, range[0] === null ? 'Down' : 'Up');
  }

  return expr;
}
/**
 * Create the 'Up', 'Only', and 'Down' options for the given media label.
 *
 * @param {string} label Media query range label
 */


function createMediaRangeBounds(label) {
  return availableBounds.reduce(function (acc, type) {
    return _objectSpread2(_objectSpread2({}, acc), {}, _defineProperty({}, "".concat(label).concat(type), function _() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return function (props) {
        var range = get$1(props.theme, ['mediaRanges', label]);

        if (!range) {
          console.warn("Media query warning: Missing bounds for (".concat(label, ") range.\nAdd them to the theme under (mediaRanges: { ").concat(label, ": [upper, lower] })"));
        }

        var expr = range ? buildMediaExp(range, label, type) : null;
        return expr ? styledComponents.css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n                @media ", " {\n                  ", "\n                }\n              "])), expr, styledComponents.css.apply(void 0, args)) : styledComponents.css.apply(void 0, args);
      };
    }));
  }, {});
}
/**
 * Build the media query utility where for each range there is the 'Up', 'Only',
 * and 'Down' options.
 *
 * Available media queries:
 * xsmallDown
 * smallUp, smallOnly, smallDown
 * mediumUp, mediumOnly, mediumDown
 * largeUp, largeOnly, largeDown
 * xlargeUp
 *
 * To use with style components as:
 *
 * @example
 * media.smallOnly`
 *   color: red;
 * `
 */


var media = availableRanges.reduce(function (acc, label) {
  return _objectSpread2(_objectSpread2({}, acc), createMediaRangeBounds(label));
}, {});
var media$1 = media;

exports.DevseedUiThemeProvider = DevseedUiThemeProvider;
exports.GlobalStyles = GlobalStyles;
exports.add = add;
exports.antialiased = antialiased;
exports.createColorPalette = createColorPalette;
exports.createUITheme = createUITheme;
exports.disabled = disabled;
exports.divide = divide;
exports.glsp = glsp;
exports.listReset = listReset;
exports.max = max;
exports.media = media$1;
exports.min = min;
exports.multiply = multiply;
exports.px = px;
exports.rem = rem;
exports.rgba = rgba;
exports.stylizeFunction = stylizeFunction;
exports.subtract = subtract;
exports.theme = theme;
exports.themeVal = themeVal;
exports.truncated = truncated;
exports.unitify = unitify;
exports.unscrollableX = unscrollableX;
exports.unscrollableY = unscrollableY;
exports.val2px = val2px;
exports.val2rem = val2rem;
exports.visuallyDisabled = visuallyDisabled;
exports.visuallyHidden = visuallyHidden;
//# sourceMappingURL=index.cjs.js.map
