import React from 'react';
import T from 'prop-types';
import styled, { css } from 'styled-components';

import { createOverlineStyles } from '@devseed-ui/typography';
import { themeVal, glsp, truncated } from '@devseed-ui/theme-provider';

import { ToolbarProvider, ToolbarContextButton } from './context';

function ToolbarComponent({ className, children, size, ...rest }) {
  return (
    <ToolbarProvider size={size}>
      <div className={className} role='toolbar' {...rest}>
        {children}
      </div>
    </ToolbarProvider>
  );
}

ToolbarComponent.propTypes = {
  className: T.string,
  children: T.node,
  size: T.string
};

const setSpacingVariable = ({ size }) => {
  switch (size) {
    case 'small':
      return css`
        --toolbar-spacing: ${glsp(0.125)};
      `;
    case 'large':
      return css`
        --toolbar-spacing: ${glsp(0.5)};
      `;
    case 'xlarge':
      return css`
        --toolbar-spacing: ${glsp()};
      `;
    // medium
    default:
      return css`
        --toolbar-spacing: ${glsp(0.25)};
      `;
  }
};

export const Toolbar = styled(ToolbarComponent)`
  display: flex;
  flex-flow: row nowrap;
  align-items: center;

  ${setSpacingVariable}
  gap: var(--toolbar-spacing);
`;

export const ToolbarGroup = styled.div.attrs((props) => {
  return {
    role: props.role || 'group'
  };
})`
  all: inherit;

  & + & {
    margin-left: calc(var(--toolbar-spacing) * 4);
  }
`;

export const ToolbarLabel = styled.span`
  ${createOverlineStyles()}
  ${truncated()}
  color: ${({ variation }) =>
    variation === 'light'
      ? themeVal('color.surface')
      : themeVal('color.base-400')};
`;

export const ToolbarButton = styled(ToolbarContextButton)`
  /* styled-component */
`;

export const ToolbarIconButton = styled(ToolbarButton).attrs({
  fitting: 'skinny'
})`
  /* styled-component */
`;
